<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue移动端项目总结</title>
      <link href="/2018/03/01/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/01/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue移动项目总结"><a href="#Vue移动项目总结" class="headerlink" title="Vue移动项目总结"></a>Vue移动项目总结</h1><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="使用Vue-cli创建项目"><a href="#使用Vue-cli创建项目" class="headerlink" title="使用Vue-cli创建项目"></a>使用Vue-cli创建项目</h3><pre><code>1、安装脚手架    npm install @vue/cli2、创建项目    vue create 项目名称3、配置项目    对项目初始化进行一些配置    Vue CLI v4.1.2    ? Please pick a preset:    default (babel, eslint)    &gt; Manually select features          选择第2种：手动选择特性，支持更多自定义选项    分别选择：    Babel：es6 转 es5    Router：路由    Vuex：数据容器，存储共享数据    CSS Pre-processors：CSS 预处理器，后面会提示你选择less、sass、stylus等    Linter/Formatter：代码格式校验4、进入项目目录       cd 项目名称5、启动服务           npm run serve(dev还是server看配置)</code></pre><h3 id="初始目录结构说明"><a href="#初始目录结构说明" class="headerlink" title="初始目录结构说明"></a>初始目录结构说明</h3><pre><code>├── .browserslistrc├── .editorconfig├── .eslintrc.js├── .gitignore├── README.md├── babel.config.js├── package-lock.json├── package.json├── public│   ├── favicon.ico│   └── index.html└── src    ├── App.vue       根组件    ├── assets        资源目录    ├── components    公共组件    ├── main.js       入口模块    ├── router        路由    ├── store         Vuex容器    └── views         路由组件</code></pre><h3 id="代码的管理Git"><a href="#代码的管理Git" class="headerlink" title="代码的管理Git"></a>代码的管理Git</h3><pre><code>正常的话我们需要创建 Git 仓库并提交历史记录。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add 文件</span><br><span class="line">git commit<span class="string">"提交日志"</span></span><br></pre></td></tr></table></figure>但是Vue-cli 在生成项目的时候默认完成了Git仓库的初始化和初始提交，所以这里只需要push到线上即可。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add 你的远程仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>之后如果需要提交，则还是常规的add、commit、push。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 文件</span><br><span class="line">git commit -m <span class="string">"提交日志"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 移动项目 </tag>
            
            <tag> 总结 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于小程序开发的总结</title>
      <link href="/2018/02/27/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2018/02/27/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1、navigationBar在哪配置？配置了个啥？"><a href="#1、navigationBar在哪配置？配置了个啥？" class="headerlink" title="1、navigationBar在哪配置？配置了个啥？"></a>1、navigationBar在哪配置？配置了个啥？</h2><ul><li>app.json中配置；顶部栏（背景色、名字、名字）<img src="https://yhx0507.github.io/wxapp_static/app/1582766481284.png" class=""></li></ul><h2 id="2、tabBar是什么？-list字段中每一项都是什么？"><a href="#2、tabBar是什么？-list字段中每一项都是什么？" class="headerlink" title="2、tabBar是什么？/  list字段中每一项都是什么？"></a>2、tabBar是什么？/  list字段中每一项都是什么？</h2><ul><li>tab栏；（导航栏，项：设置每一个功能）</li><li>ist字段：配置每一项；<ul><li>text：选项文字</li><li>iconPath：图标路径，相对路径</li><li>selectedIconPath: 当前选择项的图标路径</li><li>pagePath：选项卡点击后的页面地址；</li></ul></li></ul><h2 id="3、如何理解小程序rpx单位？实际开发中有什么要求？"><a href="#3、如何理解小程序rpx单位？实际开发中有什么要求？" class="headerlink" title="3、如何理解小程序rpx单位？实际开发中有什么要求？"></a>3、如何理解小程序rpx单位？实际开发中有什么要求？</h2><ul><li>rpx：不同的手机屏幕下，代表的px值；自动识别手机的；</li><li>要求：UI给我们的页面750px的设计稿，然后写页面 测量360px，在小程序里面写360rpx;</li></ul><h2 id="4、小程序预览需要设置什么？"><a href="#4、小程序预览需要设置什么？" class="headerlink" title="4、小程序预览需要设置什么？"></a>4、小程序预览需要设置什么？</h2><ul><li>图片，打包后超过2M</li><li>本地图片：开始的时候帮助我们搭建静态页；</li><li>地址：<ul><li>项目中图片，字体文件，后台请求回来的网络地址；</li><li>tabBar图片不能上传；本地地址支持；</li></ul></li><li>预览：设置一个忽略！</li><li>**打包的设置：packOptions：打包设置  ignore：忽略打包编译项目：<img src="https://yhx0507.github.io/wxapp_static/app/1581078423738.png" class=""></li><li>文档<img src="https://yhx0507.github.io/wxapp_static/app/1580476153224.png" class=""></li><li>找到：packOptions /ignore<img src="https://yhx0507.github.io/wxapp_static/app/1580476204285.png" class=""></li></ul><h2 id="5、如何设置为体验版本？"><a href="#5、如何设置为体验版本？" class="headerlink" title="5、如何设置为体验版本？"></a>5、如何设置为体验版本？</h2><ul><li>为什么设置体验版？<ul><li>开发人员</li><li>测试人员；</li></ul></li><li>测试人员：看到我们现在写的项目；</li><li>成员管理：体验成员管理；</li><li>代码:<ul><li>上传到微信小程序后台管理平台；</li><li>版本管理：设置为体验版本！</li></ul></li></ul><h2 id="6、小程序V2样式有什么问题么？"><a href="#6、小程序V2样式有什么问题么？" class="headerlink" title="6、小程序V2样式有什么问题么？"></a>6、小程序V2样式有什么问题么？</h2><ul><li>问题：<ul><li>按钮：默认宽度；</li><li>自己设置又设置了一个宽度；</li></ul></li><li>发现：<ul><li>现在自己定义这个宽度在调试窗口已经生效；原来的默认宽度被覆盖！</li><li>在显示界面：宽度还是 默认宽度；</li><li>CSS权重问题！</li></ul></li><li>思考:<ul><li>忘记不使用v2</li><li>发现你的布局样式有问题，是不是V2问题？</li></ul></li></ul><h2 id="7、小程序wx-for-quot-item-in-list-quot-这样对么？设置唯一标示如何设置？"><a href="#7、小程序wx-for-quot-item-in-list-quot-这样对么？设置唯一标示如何设置？" class="headerlink" title="7、小程序wx:for=&quot;item in list&quot;这样对么？设置唯一标示如何设置？"></a>7、小程序<code>wx:for=&quot;item in list&quot;</code>这样对么？设置唯一标示如何设置？</h2><ul><li>vue写法：<code>v-for=&quot;item in list&quot;</code></li><li>正确：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx:for&#x3D;&#123;&#123;list&#125;&#125;     &#x2F;&#x2F;注意&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li>唯一标示：<ul><li>用数据的index,ID</li><li><code>wx:key=&quot;*this&quot;</code>：找不到唯一标示；</li></ul></li></ul><h2 id="8、多个标签被同时循环或者被判断if-，应该如何设置？"><a href="#8、多个标签被同时循环或者被判断if-，应该如何设置？" class="headerlink" title="8、多个标签被同时循环或者被判断if ，应该如何设置？"></a>8、多个标签被同时循环或者被判断if ，应该如何设置？</h2><ul><li>wx:if</li><li>组件：<code>&lt; block &gt;</code><ul><li>被同时循环或者被判断if的组件，包起来！</li><li>在block上写wx语法；</li></ul></li></ul><h2 id="9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？"><a href="#9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？" class="headerlink" title="9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？"></a>9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？</h2><ul><li>不能传入参数：语法设置不能传入；</li><li>自定义数据：<ul><li>如何设置：<code>data-xxxx</code></li><li>获取：事件执行的回调，需要事件对象；<code>e.target.dataset</code>获取自定义属性的（键值对）</li><li>意思：<strong>相当于是我们给组件通过另外的形式传入 参数</strong></li></ul></li></ul><h2 id="10、小程序更新数据，使用哪个方法？"><a href="#10、小程序更新数据，使用哪个方法？" class="headerlink" title="10、小程序更新数据，使用哪个方法？"></a>10、小程序更新数据，使用哪个方法？</h2><ul><li><code>this.setData({要更新的数据})</code></li></ul><h2 id="11、请求是哪个方法？上线后如何配置？本地开发时如何配置？"><a href="#11、请求是哪个方法？上线后如何配置？本地开发时如何配置？" class="headerlink" title="11、请求是哪个方法？上线后如何配置？本地开发时如何配置？"></a>11、请求是哪个方法？上线后如何配置？本地开发时如何配置？</h2><ul><li><code>wx.request();</code></li><li>平台：配置 request合法域名请求<img src="https://yhx0507.github.io/wxapp_static/app/1580542989630.png" class=""></li><li>本地开发：IDE测试的时候<img src="https://yhx0507.github.io/wxapp_static/app/1582770103590.png" class=""></li></ul><h2 id="12、事件执行的三个阶段？为什么要阻止冒泡？"><a href="#12、事件执行的三个阶段？为什么要阻止冒泡？" class="headerlink" title="12、事件执行的三个阶段？为什么要阻止冒泡？"></a>12、事件执行的三个阶段？为什么要阻止冒泡？</h2><ul><li>事件执行三个阶段：捕获、达到目标、冒泡阶段；</li><li>事件默认是在冒泡阶段执行；<ul><li>不阻止：<ul><li>子组件注册了tap事件</li><li>父级注册了tap事件</li><li>当我们触发子级，父级也会跟着触发；<ul><li>用户知道自己点对了：点的就是子级</li><li>父级跟着触发的这个情况：<strong>给用户体验不好</strong>，阻止冒泡！<img src="https://yhx0507.github.io/wxapp_static/app/1582770636547.png" class=""></li></ul></li></ul></li></ul></li></ul><h2 id="13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？"><a href="#13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？" class="headerlink" title="13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？"></a>13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？</h2><ul><li>打开方式：扫一扫、搜索、转发；哪种统计次数更多的话，调整公司策略；</li><li>onLaunch() : <ul><li>事件对象获取场景值；</li><li>打开方式业务在onLaunch写；单独写函数；在onLaunch调用；</li></ul></li></ul><h2 id="14、页面地址的参数如何传递？如何获取？"><a href="#14、页面地址的参数如何传递？如何获取？" class="headerlink" title="14、页面地址的参数如何传递？如何获取？"></a>14、页面地址的参数如何传递？如何获取？</h2><ul><li>小程序有很多页面；</li><li>ugo：分类商品。点击每个商品的时候，进入一个详情页（同一个页面，不同的数据）；</li><li>传递：<code>pages/detail/index?name=zs&amp;age=18</code></li><li>获取：<ul><li>页面<code>onLoad(e){}</code>事件对象可以获取 页面传递的参数；</li><li>接下来：请求数据，返回这个查询的数据，渲染；</li></ul></li></ul><h2 id="15、小程序-模块化有几种方式？"><a href="#15、小程序-模块化有几种方式？" class="headerlink" title="15、小程序 模块化有几种方式？"></a>15、小程序 模块化有几种方式？</h2><ul><li>第三方包：npm包；用别人写好的东西；</li><li>入口主文件 app.js<ul><li>其他页面使用：<code>getApp()</code>推荐！</li><li>app.js 里面写什么：<img src="https://yhx0507.github.io/wxapp_static/app/1580718071548.png" class=""></li><li>在任何页面的JS中使用：<img src="https://yhx0507.github.io/wxapp_static/app/1580718169881.png" class=""></li></ul></li></ul><h2 id="16、小程序npm模块如何配置和使用？"><a href="#16、小程序npm模块如何配置和使用？" class="headerlink" title="16、小程序npm模块如何配置和使用？"></a>16、小程序npm模块如何配置和使用？</h2><ul><li>第三方包：npm包；用别人写好的东西；</li><li>封装比较好，功能丰富！</li><li>项目的目录下：<ul><li><code>npm  init --yes</code></li><li><code>npm i xxx -S</code></li><li>点击  <strong>微信开发工具 / 工具 / 构建npm</strong><img src="https://yhx0507.github.io/wxapp_static/app/1580717065354.png" class=""></li><li>详情  /  本地设置**：使用npm模块<img src="https://yhx0507.github.io/wxapp_static/app/1580717147899.png" class=""></li><li>测试：<img src="https://yhx0507.github.io/wxapp_static/app/1580717283875.png" class=""></li></ul></li><li>了解：小程序寻找包的规则：在JS页面中使用<code>require</code><ul><li>优先：寻找<code>miniprogram_npm</code>下的包</li><li>如果没有，则找当前路径下，有没有这个名字的JS文件</li><li>如果没有，则页面报错找不到；</li></ul></li></ul><h2 id="17、wxs在渲染层起到什么作用？"><a href="#17、wxs在渲染层起到什么作用？" class="headerlink" title="17、wxs在渲染层起到什么作用？"></a>17、wxs在渲染层起到什么作用？</h2><ul><li>小程序：<ul><li>渲染层 + JS逻辑层:  没有直接的关联；</li></ul></li><li>需求：页面数据 返回的 时间戳 ；需要转换为 时间格式</li><li>JS逻辑层：处理时间戳，有可能会改变源数据；</li><li>想要：时间格式能显示，又不改变源数据！</li><li>渲染层：<strong>wxml wxss wxs:(可以理解微信自己的特有的为HTML CSS  JS )</strong></li><li>代码:<br>  执行函数(time)<ul><li>如果<code>执行函数</code>是真实页面下JS内一个方法；就不会生效！</li><li><code>自定义函数</code>可以设置为 wxs下的一个方法：就可以使用  </li></ul></li><li>思考：<strong>wxs当做：vue中常说 filter 过滤器；</strong></li></ul><h2 id="18、通信的思考：数据共享"><a href="#18、通信的思考：数据共享" class="headerlink" title="18、通信的思考：数据共享!!!"></a>18、通信的思考：数据共享!!!</h2><ul><li>组件：<ul><li>父子组件！</li><li>组件之间如何通信？</li></ul></li><li>子组件：设置自定义属性：<ul><li><strong>自己笔记：理解写下来！</strong></li></ul></li><li>思考：<ul><li><strong>兄弟组件之间如何通信？getApp();</strong></li><li>背后：为了共享一些数据：</li><li>vue:共享数据；<ul><li>eventbus</li><li>找个自己写的公共的JS文件；</li><li>localStorage</li></ul></li></ul></li><li>新的语法：<ul><li>语法，思考语法能帮助实现啥？</li><li><strong>写例子：todoList(增 删 改 查)</strong> <a href="http://www.todolist.cn/" target="_blank" rel="noopener">http://www.todolist.cn/</a></li></ul></li></ul><h2 id="19、通信：父给子传递数据，子组件需要设置什么？"><a href="#19、通信：父给子传递数据，子组件需要设置什么？" class="headerlink" title="19、通信：父给子传递数据，子组件需要设置什么？"></a>19、通信：父给子传递数据，子组件需要设置什么？</h2><ul><li>子级：接受数据，设置属性：<img src="https://yhx0507.github.io/wxapp_static/app/1580733828085.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1582774635403.png" class=""></li></ul><h2 id="20、组件通信：子给父传递数据，子组件需要设置什么？"><a href="#20、组件通信：子给父传递数据，子组件需要设置什么？" class="headerlink" title="20、组件通信：子给父传递数据，子组件需要设置什么？"></a>20、组件通信：子给父传递数据，子组件需要设置什么？</h2><ul><li>理解：子组件自定义事件名称，及要发送数据；</li><li>语法：<img src="https://yhx0507.github.io/wxapp_static/app/1582774593628.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1582774604003.png" class=""></li></ul><h2 id="21、表单：如何获取输入框的数据？如何获取单-多选择框的数据？"><a href="#21、表单：如何获取输入框的数据？如何获取单-多选择框的数据？" class="headerlink" title="21、表单：如何获取输入框的数据？如何获取单/多选择框的数据？!!!"></a>21、表单：如何获取输入框的数据？如何获取单/多选择框的数据？!!!</h2><ul><li>表单输入类：<ul><li>form：<ul><li>form本身 绑定事件submit事件 </li><li>form 下面按钮：<code>form-type</code><img src="https://yhx0507.github.io/wxapp_static/app/1582775047238.png" class=""></li></ul></li><li>获取表单数据：<ul><li>input 组件  name属性</li><li>在submit回调函数 的事件 对象里获取；<code>ev.detail.value</code></li></ul></li></ul></li><li>单/多选择：<ul><li>单/多选择组 （组件）绑定 change 事件</li><li>change 事件回调函数 拿到单多选的数据；</li><li>拿到数据通过 this.setData（）设置到初始化数据中</li><li>在form 的submit 事件的回调函数内可以拿到数据:<img src="https://yhx0507.github.io/wxapp_static/app/1580804605204.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1580804994859.png" class=""></li></ul></li></ul><h2 id="22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？"><a href="#22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？" class="headerlink" title="22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？"></a>22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？</h2><ul><li>问题：<ul><li>搜索是按照一个组件的形式；页面中一个标签！</li><li>布局：把整个页面覆盖住，主页上组件大多了；会出现滚动条！<img src="https://yhx0507.github.io/wxapp_static/app/1582784107740.png" class=""></li></ul></li><li>解决过程：<ul><li>搜索组件处于聚焦状态的时候，</li><li>获取下窗口显示的高度，</li><li>通过父子组件通信：把获取的高度传递回去；</li><li>父级页面中可以获取高度H！</li><li>设置页面高pageH度为  H；样式上：设置溢出隐藏！</li></ul></li><li>其他思路：<ul><li>主页上搜索的地方放入组件input；注册事件；点击；</li><li>触发事件后：转跳另外一个页面；</li><li>可以规避滚动条问题！</li><li>体验不如上一个：转跳的时候会有短暂的白页面！</li></ul></li></ul><h2 id="23、下拉刷新需要配置么，接下来的业务是什么，如何实现？"><a href="#23、下拉刷新需要配置么，接下来的业务是什么，如何实现？" class="headerlink" title="23、下拉刷新需要配置么，接下来的业务是什么，如何实现？"></a>23、下拉刷新需要配置么，接下来的业务是什么，如何实现？</h2><ul><li>配置：<ul><li>需要配置；<ul><li>原生：index.json</li><li>uni: pages.json<img src="https://yhx0507.github.io/wxapp_static/app/1582785590870.png" class=""></li></ul></li><li>在哪？订单页，支付页，商品分类页！！页面下JSON文件；每一个小程序页面也可以使用 <code>.json</code> 文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enablePullDownRefresh:true</span><br></pre></td></tr></table></figure></li><li>开启：效果！！！</li></ul></li><li>业务：<ul><li>用户：下拉是个行为；</li><li>函数：响应这个行为；生命周期（函数）！<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    onPullDownRefresh()&#123; 所有数据进行重新请求一次&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>请求：异步<ul><li>uni-app：async await;</li><li>原生开发：所有的异步都完成后，结束下拉效果；<ul><li><strong>封装promise；</strong></li><li>promise.all[].then(function(结束下拉效果))      </li></ul></li></ul></li></ul></li></ul><h2 id="24、多次触底多次加载，如何解决这个问题？"><a href="#24、多次触底多次加载，如何解决这个问题？" class="headerlink" title="24、多次触底多次加载，如何解决这个问题？"></a>24、多次触底多次加载，如何解决这个问题？</h2><ul><li>解决1：<img src="https://yhx0507.github.io/wxapp_static/app/1582785979764.png" class=""></li><li>解决2：<ul><li>请求插件封装！</li><li>优化：loading层加载（api：设置mask 遮罩！透明黑色层，用户防止用户再次触发屏幕！)</li></ul></li></ul><h2 id="25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？"><a href="#25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？" class="headerlink" title="25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？"></a>25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？</h2><ul><li>小程序：页面滚动<ul><li>区域滚动：组件内可以形成一个滚动；特有的组件 <scroll-view><img src="https://yhx0507.github.io/wxapp_static/app/1582786318936.png" class=""></li></ul></li><li>通过css：overflow属性，bug：当你滑动屏幕的时候，不知道大家要让哪个部分滑动；</li><li>区域滚动的应用场景有哪些？<ul><li>横向很长导航栏；<img src="https://yhx0507.github.io/wxapp_static/app/1582786576338.png" class=""></li><li>ugo：搜索确认栏布局<img src="https://yhx0507.github.io/wxapp_static/app/1582786656808.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1582786780828.png" class=""></li></ul></li></ul><h2 id="26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？"><a href="#26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？" class="headerlink" title="26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？"></a>26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？</h2><ul><li>转跳到 非tabBar<ul><li>组件：<code>&lt;navigator url=&quot;/pages/goods/index&quot;&gt;</code></li><li>JS：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url:<span class="string">"/pages/goods/index"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li>转跳到 tabBar<ul><li>组件：<code>&lt;navigator url=&quot;/pages/goods/index&quot; open-type=&quot;switchTab&quot;&gt;</code></li><li>JS：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.switchTab(&#123;</span><br><span class="line">url:&quot;&#x2F;pages&#x2F;goods&#x2F;index&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li>回到上一页：<code>wx.navigateBack()</code></li></ul><h2 id="27、小程序的页面默认支持转发么？如何配置自定义转发？"><a href="#27、小程序的页面默认支持转发么？如何配置自定义转发？" class="headerlink" title="27、小程序的页面默认支持转发么？如何配置自定义转发？"></a>27、小程序的页面默认支持转发么？如何配置自定义转发？</h2><ul><li>页面：广告页！订单页，个人用户信息页！默认不支持；</li><li>开启：<ul><li>配置：<code>uni.showShareMenu();</code>  只是开启，不是自定义；（低配版）</li><li><strong>自定义转化</strong>：默认转发的时候，样子太丑，用户不敢点击，页面的一个生命周期函数；需要返回一个对象，包括下面：（美化版）<ul><li>转化的标题</li><li>图片（经过设计的图片）</li><li>链接地址；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onShareAppMessage () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        title: &#39;欢迎使用UGO!&#39;,</span><br><span class="line">        imageUrl: &#39;http:&#x2F;&#x2F;www.999zx.cn&#x2F;adm_file&#x2F;fck</span><br><span class="line">                  &#x2F;images&#x2F;2018&#x2F;4&#x2F;Image&#x2F;20184386447866.jpg&#39;,</span><br><span class="line">        path: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？"><a href="#28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？" class="headerlink" title="28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？"></a>28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？</h2><ul><li><strong>用户隐私：需要让用户自己点；</strong>  <code>&lt;button open-type&gt;</code><img src="https://yhx0507.github.io/wxapp_static/app/1582788559017.png" class=""></li><li>非隐私信息：头像，昵称，性别，国际，语言！type有属性值：<img src="https://yhx0507.github.io/wxapp_static/app/1582788641819.png" class=""></li></ul><h2 id="29、ugo购物车结算前，需要做什么验证？"><a href="#29、ugo购物车结算前，需要做什么验证？" class="headerlink" title="29、ugo购物车结算前，需要做什么验证？"></a>29、ugo购物车结算前，需要做什么验证？</h2><ul><li>三个验证：<ul><li>收货地址：</li><li>结算商品：</li><li>token：当前谁要买这个商品的这个用户 ，标识加密字符串的标识；<ul><li>没有token：token获取流程；用户登录获取token的整个流程？<img src="https://yhx0507.github.io/wxapp_static/app/1582789158440.png" class=""></li></ul></li></ul></li><li>code ：<ul><li>为了安全！</li><li>如果token泄露了，其他人拿到 A君的token ，结算！</li><li>有个平台小额免密支付：用该用户的A君 token 支付；</li></ul></li></ul><h2 id="30、组件web-view有啥作用？"><a href="#30、组件web-view有啥作用？" class="headerlink" title="30、组件web-view有啥作用？"></a>30、组件web-view有啥作用？</h2><ul><li>web-view：src：引入外面域名地址；</li><li>可以通过小程序直接内引入 已经写好的HTML5移动端页面；</li><li>个人不支持：web-view</li><li>好处：应急！HTML5网页；</li><li>开发的时候：配置<img src="https://yhx0507.github.io/wxapp_static/app/1582770103590.png" class=""></li></ul><h2 id="31、什么是微信网页？有什么特别的地方？"><a href="#31、什么是微信网页？有什么特别的地方？" class="headerlink" title="31、什么是微信网页？有什么特别的地方？"></a>31、什么是微信网页？有什么特别的地方？</h2><ul><li>面试：公众号开发！前端！</li><li>微信网页：HTNL CSS JS移动端页面</li><li>特别的地方：<ul><li>没有什么特别地方：本身来说，就是HTML页面放入公众号了；</li><li>特别地方：<ul><li>放入公众号，可以用一些微信特别的功能；JS-SDK</li><li>拍照、录音等！</li></ul></li></ul></li><li>思路：<ul><li>过去：没有小程序，网页有些特别的功能，JS-SDK JS包；</li><li>现在：小程序，提供了非常丰富的API；</li></ul></li></ul><h2 id="32、使用JS-SDK的获取验证的整个流程？（从前到后）"><a href="#32、使用JS-SDK的获取验证的整个流程？（从前到后）" class="headerlink" title="32、使用JS-SDK的获取验证的整个流程？（从前到后）"></a>32、使用JS-SDK的获取验证的整个流程？（从前到后）</h2><img src="https://yhx0507.github.io/wxapp_static/app/1582789999257.png" class=""><ul><li>验证：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>,  <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert</span></span><br><span class="line">                <span class="comment">// 出来，若要查看传入的参数，可以在pc端打开，参数信</span></span><br><span class="line">                <span class="comment">// 息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>使用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="33、-quot-errMsg-quot-chooselmage-fail-permission-value-is-offline-verifying-quot-这个报错是什么意思？"><a href="#33、-quot-errMsg-quot-chooselmage-fail-permission-value-is-offline-verifying-quot-这个报错是什么意思？" class="headerlink" title="33、{&quot;errMsg&quot;chooselmage:fail, permission value is offline verifying&quot;} 这个报错是什么意思？"></a>33、<code>{&quot;errMsg&quot;chooselmage:fail, permission value is offline verifying&quot;}</code> 这个报错是什么意思？</h2><ul><li>用的这个API方法没有登记；</li><li>在哪登记？ config方法下面 <strong>jsApiList</strong> ：[“chooselmage”]</li></ul><h2 id="34、WeUI是什么？可以在非微信网页使用么？"><a href="#34、WeUI是什么？可以在非微信网页使用么？" class="headerlink" title="34、WeUI是什么？可以在非微信网页使用么？"></a>34、WeUI是什么？可以在非微信网页使用么？</h2><ul><li>CSS样式库；微信团队已经写好的CSS样式；</li><li>非微信网页使用：当然可以！！！</li><li>移动端：样式像微信；WeUI</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组常用方法，掌握这些就够了</title>
      <link href="/2017/12/15/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%8C%E6%8E%8C%E6%8F%A1%E8%BF%99%E4%BA%9B%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
      <url>/2017/12/15/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%8C%E6%8E%8C%E6%8F%A1%E8%BF%99%E4%BA%9B%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数组遍历的一些方法"><a href="#数组遍历的一些方法" class="headerlink" title="数组遍历的一些方法"></a>数组遍历的一些方法</h1><h2 id="1、forEach方法"><a href="#1、forEach方法" class="headerlink" title="1、forEach方法"></a>1、forEach方法</h2><pre><code>forEach((item, index, self) =&gt;{ //数组处理代码  })    对数组进行遍历，对数组中的每一个成员执行回调函数中的代码可以对数组中的成员    进行筛选，也可以对每一个成员进行一些操作，没有返回值参数：    item：数组遍历的当前成员（非必须参数）    index：数组当前项的索引（非必须参数）    sele：数组本身（非必须参数）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 2, 3]</span><br><span class="line">arr.forEach((item, index, arrself) &#x3D; &gt;&#123;</span><br><span class="line">    console.log(item, index, arrself)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre><h2 id="2、filter方法"><a href="#2、filter方法" class="headerlink" title="2、filter方法"></a>2、filter方法</h2><pre><code>filter((item, index, self) =&gt;{ //数组处理代码  })    对数组进行过滤，对数组中的每一个成员执行回调函数中的代码可以对数组中的成员    进行筛选，返回一个满足条件的新数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [11, 20, 35, 3, 15]</span><br><span class="line">var res &#x3D; arr.filter((item, index, arrself) &#x3D; &gt;&#123;</span><br><span class="line">    return item &gt;&#x3D; 15 </span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回数组[20, 35, 15]</span><br></pre></td></tr></table></figure></code></pre><h2 id="3、map方法"><a href="#3、map方法" class="headerlink" title="3、map方法"></a>3、map方法</h2><pre><code>map((item, index, self) =&gt;{ //数组处理代码  })    对数组进行映射，对数组中的每一个成员执行回调函数中的代码，返回一个满足条件    的新数组，常用于把数组中每一项成员执行相同操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 2, 3]</span><br><span class="line">var res &#x3D; arr.map((item, index, arrself) &#x3D; &gt;&#123;</span><br><span class="line">    return item * 2 </span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回数组[2, 4, 6]</span><br></pre></td></tr></table></figure></code></pre><h2 id="4、some方法和every方法"><a href="#4、some方法和every方法" class="headerlink" title="4、some方法和every方法"></a>4、some方法和every方法</h2><pre><code>some((item, index, self) =&gt;{ //数组处理代码  })every((item, index, self) =&gt;{ //数组处理代码  })    两种方法都是对数组进行遍历，对数组中的每一个成员执行回调函数中的代码，返回    一个布尔值，常用于判断数组中成员是否满足条件不同点：    some方法在遍历数组时，只要有一个成员满足条件即停止遍历返回true    every方法在遍历数组时，需要所有成员满足条件才会返回true注意：    可以利用some只要有满足条件即会停止查找的机制优化代码执行效率<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 2, 3]</span><br><span class="line">var res1 &#x3D; arr.some((item, index, arrself) &#x3D; &gt;&#123;</span><br><span class="line">    return item &gt; 2 </span><br><span class="line">&#125;)</span><br><span class="line">console.log(res1)    &#x2F;&#x2F;返回布尔值true</span><br><span class="line"></span><br><span class="line">var res2 &#x3D; arr.every((item, index, arrself) &#x3D; &gt;&#123;</span><br><span class="line">    return item &gt; 2 </span><br><span class="line">&#125;)</span><br><span class="line">console.log(res2)    &#x2F;&#x2F;返回布尔值false</span><br></pre></td></tr></table></figure></code></pre><h2 id="5、find方法和findIndex方法"><a href="#5、find方法和findIndex方法" class="headerlink" title="5、find方法和findIndex方法"></a>5、find方法和findIndex方法</h2><pre><code>find((item, index, self) =&gt;{ //数组处理代码  })findIndex((item, index, self) =&gt;{ //数组处理代码  })    对数组进行遍历查找，对数组中的每一个成员执行回调函数中的代码，常用于查找数    组中成员的筛选，只要有满足条件的就会停止查找不同点：    find方法会返回满足条件的成员，没有满足的返回undefined    findIndex方法会返回满足条件成员的索引，没有满足的返回undefined<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 9, 3, 6, 5]</span><br><span class="line">var res1 &#x3D; arr.find((item, index, arrself) &#x3D; &gt;&#123;</span><br><span class="line">    return item &gt; 5 </span><br><span class="line">&#125;)</span><br><span class="line">console.log(res1)    &#x2F;&#x2F;返回9</span><br><span class="line"></span><br><span class="line">var res2 &#x3D; arr.findIndex((item, index, arrself) &#x3D; &gt;&#123;</span><br><span class="line">    return item &gt; 5 </span><br><span class="line">&#125;)</span><br><span class="line">console.log(res2)    &#x2F;&#x2F;返回1</span><br></pre></td></tr></table></figure></code></pre><h2 id="6、indexOf方法和lastIndexOf方法"><a href="#6、indexOf方法和lastIndexOf方法" class="headerlink" title="6、indexOf方法和lastIndexOf方法"></a>6、indexOf方法和lastIndexOf方法</h2><pre><code>indexOf(value, position)lastIndexOf(value, position)    对数组进行遍历查找，常用于查找数组中指定选项的索引，返回索引值，如果数组中    没有要查找的选项返回-1参数：    value:要查找的选项    position:查找的起始索引位置（非必须选项）不同点：    indexOf方法从前往后依次查找    lastIndexOf方法从后往前一次查找注意：    可以利用返回-1的特性判断数组是否包含要查找的选项<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 9, 3, 6, 5]</span><br><span class="line">var res1 &#x3D; arr.indexOf(9)</span><br><span class="line">console.log(res1)    &#x2F;&#x2F;返回1</span><br><span class="line"></span><br><span class="line">var res2 &#x3D; arr.lastIndexOf(9)</span><br><span class="line">console.log(res2)    &#x2F;&#x2F;返回1</span><br><span class="line"></span><br><span class="line">var res3 &#x3D; arr.indexOf(2)</span><br><span class="line">console.log(res3)    &#x2F;&#x2F;返回-1</span><br></pre></td></tr></table></figure></code></pre><h2 id="6、includes方法"><a href="#6、includes方法" class="headerlink" title="6、includes方法"></a>6、includes方法</h2><pre><code>includes(value)    对数组进行遍历查找，查找数组中是否包含要查找的选项，返回一个布尔值参数：    value:要查找的选项<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 9, 3, 6, 5]</span><br><span class="line">var res &#x3D; arr.indexOf(9)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回true</span><br></pre></td></tr></table></figure></code></pre><h1 id="数组处理的一些方法"><a href="#数组处理的一些方法" class="headerlink" title="数组处理的一些方法"></a>数组处理的一些方法</h1><h2 id="1、join方法"><a href="#1、join方法" class="headerlink" title="1、join方法"></a>1、join方法</h2><pre><code>join(分隔符)    对数组中每一项用分隔符进行拼接，返回一个字符串参数：    分隔符:数组以什么字符进行拼接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 9, 3, 6, 5]</span><br><span class="line">var res &#x3D; arr.join(&quot;$&quot;)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回字符串&quot;1$9$3$6$5&quot;</span><br></pre></td></tr></table></figure></code></pre><h2 id="2、concat方法"><a href="#2、concat方法" class="headerlink" title="2、concat方法"></a>2、concat方法</h2><pre><code>concat(options)    对数组进行参数的拼接，常用于把其他数组和操作数组拼接在一起，返回一个新数组参数：    options:数组要拼接的参数（可以是字符串，也可以是数组）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 5]</span><br><span class="line">var str &#x3D; &quot;你好&quot;</span><br><span class="line">var arrNew &#x3D; [3, 6]</span><br><span class="line">var res &#x3D; arr.concat(str, arrNew)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回数组[1, 5, &quot;你好&quot;, 3, 6]</span><br></pre></td></tr></table></figure></code></pre><h2 id="3、push方法和pop方法"><a href="#3、push方法和pop方法" class="headerlink" title="3、push方法和pop方法"></a>3、push方法和pop方法</h2><pre><code>push(options)    对数组进行添加成员，常用于把其他参数添加到数组`后`面，返回修改后数组长度pop()    对数组成员进行删除，常用于把数组`最后一项`移出，返回被移除的成员参数：    options:添加数组的成员<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 5]</span><br><span class="line">var res1 &#x3D; arr.push(3, 7)</span><br><span class="line">console.log(res1)    &#x2F;&#x2F;返回数组长度4</span><br><span class="line"></span><br><span class="line">var res2 &#x3D; arr.pop()</span><br><span class="line">console.log(res2)    &#x2F;&#x2F;返回被删除成员7</span><br></pre></td></tr></table></figure></code></pre><h2 id="4、unshift方法和shift方法"><a href="#4、unshift方法和shift方法" class="headerlink" title="4、unshift方法和shift方法"></a>4、unshift方法和shift方法</h2><pre><code>unshift(options)    对数组进行添加成员，常用于把其他参数添加到数组`前`面，返回修改后数组长度shift()    对数组成员进行删除，常用于把数组`第一项`移出，返回被移除的成员，空数组返回undefined参数：    options:添加数组的成员<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 5]</span><br><span class="line">var res1 &#x3D; arr.unshift(3, 7)</span><br><span class="line">console.log(res1)    &#x2F;&#x2F;返回数组长度4</span><br><span class="line"></span><br><span class="line">var res2 &#x3D; arr.shift()</span><br><span class="line">console.log(res2)    &#x2F;&#x2F;返回被删除成员3</span><br></pre></td></tr></table></figure></code></pre><h2 id="5、slice方法"><a href="#5、slice方法" class="headerlink" title="5、slice方法"></a>5、slice方法</h2><pre><code>slice(start, end)    对数组进行截取，常用于截取数组中的一段数据，返回一个新数组参数：    start:截取的开始位置    end:截取的结束位置（非必须参数）注意：    只设置一个参数测从开始位置截取到数组结束，默认第二个参数变成数组长度    设置两个参数时位置包左不包右，会截取到结束位置前一个成员<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 5, 3, 7, 10, 21, 6]</span><br><span class="line">var res &#x3D; arr.slice(2, 4)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回数组[3, 7, 10]</span><br></pre></td></tr></table></figure></code></pre><h2 id="6、splice方法-一个非常非常好用的数组处理方法"><a href="#6、splice方法-一个非常非常好用的数组处理方法" class="headerlink" title="6、splice方法(一个非常非常好用的数组处理方法)"></a>6、splice方法(一个非常非常好用的数组处理方法)</h2><pre><code>splice(start, count, value)    对数组进行截取，常用于截取数组中的数据，插入数据，返回被删除选项组成的新数    组，如果没有删除选项则返回空数组，非常强大的方法，操作原数组参数：    start:截取的开始位置（必须参数）    count:截取的成员数（必须参数）    value:要插入数组的成员（非必须参数）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 5, 3, 7, 10, 21, 6]</span><br><span class="line">var res &#x3D; arr.splice(2, 1, &quot;插入数据&quot;)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回数组[3]</span><br><span class="line">console.log(arr)    &#x2F;&#x2F;[1, 5, &quot;插入数据&quot;, 7, 10, 21, 6]</span><br></pre></td></tr></table></figure></code></pre><h1 id="数组中的其他方法"><a href="#数组中的其他方法" class="headerlink" title="数组中的其他方法"></a>数组中的其他方法</h1><h2 id="1、reverse方法"><a href="#1、reverse方法" class="headerlink" title="1、reverse方法"></a>1、reverse方法</h2><pre><code>reverse()    对数组进行翻转，用来改变数组中成员的顺序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 9, 3, 6, 5]</span><br><span class="line">arr.reverse()</span><br><span class="line">console.log(arr)    &#x2F;&#x2F;[5, 6, 3, 9, 1]</span><br></pre></td></tr></table></figure></code></pre><h2 id="2、flat方法"><a href="#2、flat方法" class="headerlink" title="2、flat方法"></a>2、flat方法</h2><pre><code>flat(value)    对多维数组进行铺平展开，常用于数组中成员依然为数组的数组进行展开变成一维数    组，返回一个新数组参数：    value:要展开数组得维数注意：    在一般情况下我们不知道要展开数组的维数，可设置为infinite<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 9, [7, 8, 10], 6, 5]</span><br><span class="line">var res &#x3D; arr.flat(infinite)</span><br><span class="line">console.log(res)    &#x2F;&#x2F;返回一维数组[1, 9, 7, 8, 10, 6, 5]</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
