<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通过Blob实现图片下载</title>
      <link href="/2020/08/06/%E9%80%9A%E8%BF%87Blob%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/08/06/%E9%80%9A%E8%BF%87Blob%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="问题：通过iframe的方式下载图片的时候，不能够修改图片的名字"><a href="#问题：通过iframe的方式下载图片的时候，不能够修改图片的名字" class="headerlink" title="问题：通过iframe的方式下载图片的时候，不能够修改图片的名字"></a>问题：通过iframe的方式下载图片的时候，不能够修改图片的名字</h2><h3 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h3><ol><li><p>因为图片地址是跨域的，所以先要转成 base64 数据流</p></li><li><p>然后把 base64 转换成 blob对象</p></li><li><p>然后判断浏览器的类型，选择不同的方式把 blob 文件流下载到本地</p></li></ol><h2 id="转换成base64的方法"><a href="#转换成base64的方法" class="headerlink" title="转换成base64的方法"></a>转换成base64的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">convertUrlToBase64(url) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.crossOrigin = <span class="string">"Anonymous"</span>;</span><br><span class="line">        img.src = url;</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">            canvas.width = img.width;</span><br><span class="line">            canvas.height = img.height;</span><br><span class="line">            <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">            ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height);</span><br><span class="line">            <span class="keyword">var</span> ext = img.src</span><br><span class="line">            .substring(img.src.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>)</span><br><span class="line">            .toLowerCase();</span><br><span class="line">            <span class="keyword">var</span> dataURL = canvas.toDataURL(<span class="string">"image/"</span> + ext);</span><br><span class="line">            <span class="keyword">var</span> base64 = &#123;</span><br><span class="line">                dataURL: dataURL,</span><br><span class="line">                type: <span class="string">"image/"</span> + ext,</span><br><span class="line">                ext: ext</span><br><span class="line">            &#125;;</span><br><span class="line">            resolve(base64);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换成-blob-对象"><a href="#转换成-blob-对象" class="headerlink" title="转换成 blob 对象"></a>转换成 blob 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">convertBase64UrlToBlob(base64) &#123;</span><br><span class="line">    <span class="keyword">var</span> parts = base64.dataURL.split(<span class="string">";base64,"</span>);</span><br><span class="line">    <span class="keyword">var</span> contentType = parts[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> raw = <span class="built_in">window</span>.atob(parts[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> rawLength = raw.length;</span><br><span class="line">    <span class="keyword">var</span> uInt8Array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rawLength; i++) &#123;</span><br><span class="line">        uInt8Array[i] = raw.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([uInt8Array], &#123; <span class="attr">type</span>: contentType &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断浏览器的类型"><a href="#判断浏览器的类型" class="headerlink" title="判断浏览器的类型"></a>判断浏览器的类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">myBrowser() &#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"OPR"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Opera"</span>;</span><br><span class="line">    &#125; <span class="comment">//判断是否Opera浏览器 OPR/43.0.2442.991</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Firefox"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FF"</span>;</span><br><span class="line">    &#125; <span class="comment">//判断是否Firefox浏览器  Firefox/51.0</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Trident"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"IE"</span>;</span><br><span class="line">    &#125; <span class="comment">//判断是否IE浏览器  Trident/7.0; rv:11.0</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Edge"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Edge"</span>;</span><br><span class="line">    &#125; <span class="comment">//判断是否Edge浏览器  Edge/14.14393</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Chrome"</span>;</span><br><span class="line">    &#125; <span class="comment">// Chrome/56.0.2924.87</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Safari"</span>;</span><br><span class="line">    &#125; <span class="comment">//判断是否Safari浏览器 AppleWebKit/534.57.2 Version/5.1.7 Safari/534.57.2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把获取的地址传入上面的方法，然后判断浏览器的类型"><a href="#把获取的地址传入上面的方法，然后判断浏览器的类型" class="headerlink" title="把获取的地址传入上面的方法，然后判断浏览器的类型"></a>把获取的地址传入上面的方法，然后判断浏览器的类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//图片格式和PDF</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    convertUrlToBase64(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">base64</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 图片转为base64</span></span><br><span class="line">        <span class="keyword">var</span> blob = that.convertBase64UrlToBlob(base64); <span class="comment">// 转为blob对象</span></span><br><span class="line">        <span class="comment">// 下载</span></span><br><span class="line">        <span class="keyword">if</span> (myBrowser() == <span class="string">"IE"</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.navigator.msSaveBlob(blob, name + <span class="string">".jpg"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (myBrowser() == <span class="string">"FF"</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = url;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">            a.download = name;</span><br><span class="line">            a.href = URL.createObjectURL(blob);</span><br><span class="line">            a.click();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 文件下载 </tag>
            
            <tag> 图片下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy和Object.defineProperty</title>
      <link href="/2020/07/10/Proxy/"/>
      <url>/2020/07/10/Proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Proxy与Object-defineProperty"><a href="#Proxy与Object-defineProperty" class="headerlink" title="Proxy与Object.defineProperty"></a><strong>Proxy与Object.defineProperty</strong></h2><h3 id="一、Proxy"><a href="#一、Proxy" class="headerlink" title="一、Proxy"></a><strong>一、Proxy</strong></h3><p>let proxy = new Proxy(target, handler);</p><p><em>tgarget</em>：要代理的目标对象。（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><p><em>handler</em>：定义拦截行为的配置对象（也是一个对象，其内部的属性均为执行操作的函数）。</p><p><strong>1、</strong>set(target, key, value, receiver)  拦截对象属性的设置</p><p><em>target</em>：要代理的目标对象。</p><p><em>key</em>：要设置的属性名。</p><p><em>value</em>：要设置的属性值。</p><p><em>receiver</em>：proxy实例（可选参数，一般不用）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Monster</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eyeCount = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler1 = &#123;</span><br><span class="line">  <span class="keyword">set</span>(obj, prop, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((prop === <span class="string">'eyeCount'</span>) &amp;&amp; ((value % <span class="number">2</span>) !== <span class="number">0</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Monsters must have an even number of eyes'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> monster1 = <span class="keyword">new</span> Monster();</span><br><span class="line"><span class="keyword">const</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(monster1, handler1);</span><br><span class="line">proxy1.eyeCount = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// expected output: "Monsters must have an even number of eyes"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy1.eyeCount);</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br></pre></td></tr></table></figure><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710114517347.png" class=""><p><strong>2、</strong>get(target, key, receiver) 拦截对象属性的读取</p><p><em>target</em>：要代理的目标对象。</p><p><em>key</em>：属性名。</p><p><em>receiver：proxy</em>实例（可选参数，一般不用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(target, prop, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"called: "</span> + prop);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.a); <span class="comment">// "called: a"</span></span><br><span class="line">                  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710114540710.png" class=""><p><strong>3、</strong>has(target, Key) 判断对象是否具有某个属性。</p><p><em>target</em>：要代理的目标对象。</p><p><em>key</em>：要设置的属性名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler1 = &#123;</span><br><span class="line">  has(target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> monster1 = &#123;</span><br><span class="line">  _secret: <span class="string">'easily scared'</span>,</span><br><span class="line">  eyeCount: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(monster1, handler1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'eyeCount'</span> <span class="keyword">in</span> proxy1);</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'_secret'</span> <span class="keyword">in</span> proxy1);</span><br><span class="line"><span class="comment">// expected output: false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'_secret'</span> <span class="keyword">in</span> monster1);</span><br><span class="line"><span class="comment">// expected output: true</span></span><br></pre></td></tr></table></figure><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710114558303.png" class=""><p><strong>4、</strong>apply(target, thisArgs, args) 拦截函数的调用、call和apply操作</p><p><em>target</em>：目标对象。</p><p><em>thisArgs</em>：目标对象的上下文对象（this）。</p><p><em>args</em>：目标对象的参数数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span>(<span class="params">target, thisArg, argumentsList</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Calculate sum: <span class="subst">$&#123;argumentsList&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// expected output: "Calculate sum: 1,2"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target(argumentsList[<span class="number">0</span>], argumentsList[<span class="number">1</span>]) * <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(sum, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy1(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: 30</span></span><br></pre></td></tr></table></figure><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710114612270.png" class=""><p><strong>5、</strong>construct(target, args，newTarget) 拦截new命令</p><p><em>target</em>：目标对象。</p><p><em>args</em>：构造函数的参数列表。</p><p><em>newTarget</em>：创建实例对象时，new命令作用的构造函数（下面例子的p）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">monster1</span>(<span class="params">disposition</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.disposition = disposition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler1 = &#123;</span><br><span class="line">  construct(target, args) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'monster1 constructor called'</span>);</span><br><span class="line">    <span class="comment">// expected output: "monster1 constructor called"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> target(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(monster1, handler1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> proxy1(<span class="string">'fierce'</span>).disposition);</span><br><span class="line"><span class="comment">// expected output: "fierce"</span></span><br></pre></td></tr></table></figure><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710114625044.png" class=""><p><strong>6、</strong>this问题</p><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710114641008.png" class=""><h3 id="二、Object-defineProperty-obj-prop-descriptor"><a href="#二、Object-defineProperty-obj-prop-descriptor" class="headerlink" title="二、Object.defineProperty(obj, prop, descriptor)"></a><strong>二、Object.defineProperty(obj, prop, descriptor)</strong></h3><p>Object.defineProperty()的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性</p><p>参数说明：</p><p>​    obj：必需。目标对象 </p><p>​    prop：必需。需定义或修改的属性的名字</p><p>​    descriptor：必需。目标属性所拥有的特性</p><p>返回值：</p><p>​    传入函数的对象。即第一个参数obj</p><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">configurable：表示该属性能否通过delete删除，能否修改属性的特性或者能否修改访问器属性，默认为false。当且仅当该属性的configurable为true时，才能实现上述行为。</span><br><span class="line"></span><br><span class="line">enumerable：表示该属性是否可以枚举，即可否通过for..in访问属性。默认为false。</span><br><span class="line"></span><br><span class="line">get：在读取属性时调用的函数，默认值为undefined。</span><br><span class="line"></span><br><span class="line">set：在写入属性时调用的函数，默认值为undefined。</span><br></pre></td></tr></table></figure><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710175143926.png" class=""><p>存取描述符 –是由一对 getter、setter 函数功能来描述的属性</p><p>get：一个给属性提供getter的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。</p><p>set：一个给属性提供setter的方法，如果没有setter则为undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认值为undefined。</p><img src="https://yhx0507.github.io/wxapp_static/app/image-20200710174313755.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> defineProperty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm全局安装包后无法使用问题解决</title>
      <link href="/2020/04/04/npm%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E5%8C%85%E5%90%8E%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/04/04/npm%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E5%8C%85%E5%90%8E%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>问题：<code>使用npm安装typescript明明安装成功，但在使用时一直报错，报错语句为  tsc不是内部或外部命令，也不是可运行的程序或批处理文件</code></p><img src="https://yhx0507.github.io/wxapp_static/app/image_2020-07-24_20-25-53.png" class=""><p><strong>具体原因：node未正确安装，或相关环境变量未正确配置</strong></p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a><strong>配置环境变量</strong></h2><p>“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”。</p><img src="https://yhx0507.github.io/wxapp_static/app/image_2020-07-24_20-25-53.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/image_2020-07-24_20-31-49.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/image_2020-07-24_20-32-45.png" class=""><p> 新建系统变量 NODE_PATH</p><p>进入环境变量对话框，在系统变量下新建”NODE_PATH”，输入”<code>D:\Program Files\Nodejs\node_global</code>“。</p><p>（说明：在安装nodejs时配置了全局文件夹和缓存文件夹，所以node_path 值是”D:\Program Files\Nodejs\node_global“。如果在装node时候，没有配置全局文件和缓存两个文件夹，此处NODE_PATH的值为“<code>用下面的没命令查看</code>”）</p><img src="https://yhx0507.github.io/wxapp_static/app/image_2020-07-24_20-38-42.png" class=""><p><code>npm目录可以使用npm命令去查找：npm config get prefix</code></p><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-07-24_20-41-28.png" class=""><p>用户变量和系统变量Path，添加值：%NODE_PATH%</p><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-07-24_20-42-50.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-07-24_20-45-58.png" class=""><p>在配置完变量后，关闭dos命令窗口重启dos命令，输入命令，查看是否成功。</p><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-07-24_20-46-39.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> 不是内部命令或外部命令 </tag>
            
            <tag> 不是可运行的程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/2019/09/14/node/"/>
      <url>/2019/09/14/node/</url>
      
        <content type="html"><![CDATA[<h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><p>文件系统（fs 模块）模块中的方法均有异步和同步版本</p><p>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。</p><p>建议大家使用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。</p><ol><li><p>读文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file - 文件名或文件描述符。</span></span><br><span class="line"><span class="comment">// options - 默认编码为 utf8</span></span><br><span class="line"><span class="comment">// callback - 回调函数，回调函数包含错误信息参数和读取数据(err, data)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line">fs.readFile(<span class="string">'file.txt'</span>, [options], <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"异步读取: "</span> + data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取</span></span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"同步读取: "</span> + data.toString());</span><br></pre></td></tr></table></figure></li><li><p>写文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步写入</span></span><br><span class="line"><span class="comment">// file - 文件名或文件描述符。</span></span><br><span class="line"><span class="comment">// data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(缓冲) 对象。</span></span><br><span class="line"><span class="comment">// options - 包含 &#123;encoding, mode, flag&#125;。默认编码为 utf8, 模式为 0666 ，flag 为 'w'</span></span><br><span class="line"><span class="comment">// callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回</span></span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'file.txt'</span>, [options],  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"数据写入成功！"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取</span></span><br><span class="line"><span class="keyword">var</span> result = fs.writeFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"同步写入: "</span> + result);</span><br></pre></td></tr></table></figure></li></ol><h2 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h2><p>http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块</p><ol><li><p>使用http模块启动web服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">      response.end();</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="comment">// 监听8080端口，控制台会输出以下信息</span></span><br><span class="line">server.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>处理静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//  利用path包可以拼接请求资源绝对路径、解析请求资源后缀</span></span><br><span class="line">      <span class="keyword">const</span> extname = path.extname(pathname)</span><br><span class="line">      <span class="keyword">const</span> filePath = path.join(__dirname, <span class="string">'public'</span>, pathname)</span><br><span class="line">      fs.readFile(filePath, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        response.statusCode = <span class="number">404</span></span><br><span class="line">        response.end(<span class="string">'Not Found'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//  根据不同得文件类型设置响应头</span></span><br><span class="line">      <span class="keyword">if</span> (extname === <span class="string">'.html'</span>) &#123;</span><br><span class="line">        response.setHeader(<span class="string">'Content-type'</span>, <span class="string">'text/html;charset=utf8;'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (extname === <span class="string">'.js'</span>) &#123;</span><br><span class="line">        response.setHeader(<span class="string">'Content-type'</span>, <span class="string">'text/javascript;charset=utf8;'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (extname === <span class="string">'.css'</span>) &#123;</span><br><span class="line">        response.setHeader(<span class="string">'Content-type'</span>, <span class="string">'text/css;charset=utf8;'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">      response.end();</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>处理get接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(request.method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">          <span class="comment">//  利用url包可解析出请求的请求路径和query参数，为true后可直接把查询参数解析为对象</span></span><br><span class="line">          <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(request.url, <span class="literal">true</span>)</span><br><span class="line">          consoele.log(pathname, query)</span><br><span class="line">          <span class="comment">//  发送响应数据</span></span><br><span class="line">        response.end();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>处理post接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(request.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> rsData = <span class="string">''</span></span><br><span class="line">    request.on(<span class="string">'data'</span>,rs =&gt; &#123;</span><br><span class="line">      rsData += rs</span><br><span class="line">    &#125;)</span><br><span class="line">    request.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="comment">//  利用querystring包的parse方法可以解析出请求体传来的参数</span></span><br><span class="line">      <span class="keyword">let</span> &#123; name, content &#125; = qs.parse(rsData)</span><br><span class="line">      <span class="built_in">console</span>.log(name, content)</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">          response.end();</span><br><span class="line">    &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h2><p>Express 是一个保持最小规模的灵活的 Node.js Web 应用程序开发框架，为 Web 和移动应用程序提供一组强大的功能。使用您所选择的各种 HTTP 实用工具和中间件，快速方便地创建强大的 API。</p><p>Express 框架核心特性：</p><ul><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML 页面。</li></ul><ol><li><p>初始化目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure></li><li><p>使用express创建web服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引如包</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 创建web服务</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 路由一个api</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello World!'</span>))</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(port, [callback])</span><br></pre></td></tr></table></figure></li><li><p>处理静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个可选path 第二个静态资源路径</span></span><br><span class="line">app.use([path], express.static(<span class="string">'path'</span>))</span><br></pre></td></tr></table></figure></li><li><p>get接口处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无url参数</span></span><br><span class="line">app.get(<span class="string">'/get-no-params'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">    message: <span class="string">'请求成功'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 有url参数</span></span><br><span class="line">app.get(<span class="string">'/get-params'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">    message: <span class="string">'请求成功'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      ...req.query,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>post接口处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">// Multer 会添加一个body对象以及file或files对象到express的request 对象中。 </span></span><br><span class="line"><span class="comment">// body对象包含表单的文本域信息，file或files对象包含对象表单上传的文件信息。</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>))</span><br><span class="line"><span class="comment">// 处理post类型传参：键值对、表单、json三种数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'upload/'</span>&#125;)</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">//  处理普通键值对接口</span></span><br><span class="line">app.post(<span class="string">'/post-params'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">    message: <span class="string">'请求成功'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      ...req.body,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//  处理表单数据文件接口</span></span><br><span class="line"><span class="comment">//  cover为表单name值</span></span><br><span class="line">app.post(<span class="string">'/post-file'</span>, upload.single(<span class="string">'cover'</span>), (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.file)</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">    message: <span class="string">'上传成功'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      ...req.body,</span><br><span class="line">      url: req.file.path</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//  处理json数据接口</span></span><br><span class="line">app.post(<span class="string">'/post-json'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">    message: <span class="string">'请求成功'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      ...req.body</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Ps-ajax发送post请求小结"><a href="#Ps-ajax发送post请求小结" class="headerlink" title="Ps  $.ajax发送post请求小结"></a>Ps  $.ajax发送post请求小结</h2><p>contentType: 键值对、表单文件、json三种数据</p><ol><li>contentType: ‘application/x-www-form-urlencoded’</li><li>contentType: ‘multipart/formdata’</li><li>contentType: ‘application/json’</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack入门</title>
      <link href="/2019/07/20/Webpack%E5%85%A5%E9%97%A8/"/>
      <url>/2019/07/20/Webpack%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="webpack介绍"><a href="#webpack介绍" class="headerlink" title="webpack介绍"></a>webpack介绍</h2><img src="https://yhx0507.github.io/wxapp_static/app/image-20191224224949905.png" class=""><p><strong>举例</strong>:一个项目中可以设置许多less文件，每个less文件需要被编译为普通的css文件内容查才可以执行，一个项目中如果有许多less文件，每个都分别编译，工作效率低下,可以用<strong>webpack</strong>统一解决!!!</p><p><strong>举例</strong>es6/es7内容，项目发布后为了使得全部的浏览器都可以执行该项目(兼容性要更好)，就要对es6、es7的高级内容做降级处理，降级为es5的内容，每个es6或es7的内容逐个降级处理，工作效率低下,可以用<strong>webpack</strong>统一解决!!!</p><p>webpack：一次性把项目中全部的es6、es7的高级内容降级为es5标准，提高开发效率</p><ul><li>webpack是一个现代JavasScript应用程序的<strong>模块打包器</strong></li><li>webpack本质上是一个帮助开发者完成 开发调试,应用程序打包的<strong>百宝箱工具</strong>,其包含众多的插件,模块,可以帮助开发者配置 并编译打包应用程序.</li><li><strong>图片资源</strong>/<strong>样式</strong>/<strong>ES6/ES7</strong> 高级语法 都可以通过webpack进行 相应的打包,编译.</li><li>还可以采用webpack-dev-server 进行 开启本地服务, 进行实时打包预览</li><li>webpack 本身是<strong>nodejs</strong>的一个工具框架,所以webpack本质是对于服务器或者本地文件进行操作</li></ul><h2 id="为什么使用webpack"><a href="#为什么使用webpack" class="headerlink" title="为什么使用webpack"></a>为什么使用webpack</h2><ol><li><p>现在好多网页有着很多的应用，所以它们的<code>JavaScript</code>代码比较复杂，当然也有着很多的依赖包，所以为了简化开发的复杂度，前端就出现了很多比较好的实践方法：</p><ul><li>模块化，让我们可以把复杂的程序细化为小的文件;</li><li>类似于<code>TypeScript</code>这种在<code>JavaScript</code>基础上拓展的开发语言：使我们能够实现目前版本的<code>JavaScript</code>不能直接使用的特性，并且之后还能能装换为<code>JavaScript</code>文件使浏览器可以识别；</li><li><code>scss</code>，<code>less</code>等<code>CSS</code>预处理器 …… 等等</li></ul><p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为<code>WebPack</code>类的工具的出现提供了需求。</p></li></ol><h2 id="webpack的优点"><a href="#webpack的优点" class="headerlink" title="webpack的优点"></a>webpack的优点</h2><ul><li><strong>模块化</strong></li></ul><p>这个毋庸置疑，<code>WebPack</code>本来就可以看做是模块打包机，将项目结构模块化</p><ul><li><strong>代码拆分</strong></li></ul><p><code>Webpack</code> 有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包</p><ul><li><strong>Loader</strong></li></ul><p><code>Webpack</code> 本身只能处理原生的<code>JavaScript</code>模块，但是 <code>loader</code> 转换器可以将各种类型的资源转换成 <code>javascript</code>模块，这样，任何资源都可以成为 <code>Webpack</code> 可以处理的模块。比如说<code>Webpack</code> 本身是处理不了<code>css</code>的，但是它有<code>css-loader</code>，将<code>css</code>转换成<code>js</code>可以处理的模块</p><ul><li><strong>智能解析</strong></li></ul><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 <code>CommonJS</code>、 <code>AMD</code> 还是普通的 <code>js</code>文件。甚至在加载依赖的时候，允许使用动态表达式 `require(“./templates/“ + name + “.jade”)</p><ul><li><strong>插件系统</strong></li></ul><p>插件（Plugins）是用来拓展<code>Webpack</code>功能的，它们会在整个构建过程中生效，执行相关的任务。  <code>Loaders</code>和<code>Plugins</code>常常被弄混，但是他们其实是完全不同的东西，可以这么来说，<code>loaders</code>是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。  <code>Webpack</code>有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能</p><ul><li><strong>快速运行</strong></li></ul><p><code>Webpack</code> 使用异步 <code>I/O</code> 和多级缓存提高运行效率，这使得 <code>Webpack</code> 能够以令人难以置信的速度快速增量编译</p><h2 id="webpack的工作方式"><a href="#webpack的工作方式" class="headerlink" title="webpack的工作方式"></a>webpack的工作方式</h2><ul><li><p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的<strong>主文件</strong>（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用<strong>loaders</strong>处理它们，最后打包<strong>为一个（或多个）</strong>浏览器可识别的JavaScript文件。</p><img src="https://yhx0507.github.io/wxapp_static/app/image-20191224232031224.png" class=""></li></ul><p><strong>步骤</strong>：</p><ol><li><p>创建项目目录  demo(注意,包名不能叫<strong>webpack</strong>)</p></li><li><p>给项目 创建package.json文件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init  &#x2F;&#x2F; 初始化一个npm项目</span><br></pre></td></tr></table></figure></li><li><p>在webpack目录下 创建src目录,src目录作为我们的源代码目录</p></li><li><p>安装 jquery </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i jquery -S  #  安装到运行时依赖</span><br></pre></td></tr></table></figure></li><li><p>在webpack目录下创建index.html文件,并在src目录下创建index.js文件</p></li><li><p>在index.js中实现如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var liHtml &#x3D; []</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (var i &#x3D; 0; i &lt; 100; i++) &#123;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">liHtml.push(&#96;&lt;li &gt;我是第$&#123;i + 1&#125;个里标签,你看我的颜色!!!!&lt;&#x2F;li&gt;&#96;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;#app&#39;).append(&#96;&lt;ul&gt;$&#123;liHtml.join(&quot;&quot;)&#125;&lt;&#x2F;ul&gt;&#96;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;li:even&quot;).css(&#123; background: &#39;pink&#39;, color: &#39;#fff&#39;, fontSize: &#39;30px&#39; &#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>在index.html 引入 jquery.js 和 index.js</p></li><li><p>预览index.html</p></li></ol><p><strong>计划</strong>：</p><p><strong>安装webpack</strong>，并把index.js  和  jquery.js 两个文件给打包到一个文件里边去</p><h2 id="webpack安装配置"><a href="#webpack安装配置" class="headerlink" title="webpack安装配置"></a>webpack安装配置</h2><ul><li><a href="https://webpack.docschina.org/" target="_blank" rel="noopener">官网</a></li></ul><p><strong>步骤</strong>：</p><ol><li><p>安装,webpack 和脚手架  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure></li><li><p>在package.json中做如下配置:</p><img src="https://yhx0507.github.io/wxapp_static/app/1564644669568.png" class=""><blockquote><p>package.json内部内容语法是json格式，因此有固定要求</p><ol><li>不能写注释</li><li>成员名称 与 成员值  都需要通过 双引号 圈选 (不能使用单引号)</li></ol><p>build可以自定义为其他，但是webpack字眼是固定的</p></blockquote><p>当前步骤完成，那么就可以通过如下指令进行打包处理了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build # 会执行命令 webpack &#x3D;&gt; webpack 就是打包命令</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>我们执行上述命令会出现下图</p><img src="https://yhx0507.github.io/wxapp_static/app/image-20191226213322582.png" class=""></li><li><p>我们并没有配置 <strong>入口</strong> 和<strong>出口</strong>之类的东西 ,但是webpack 自己去找了文件,所以webpack在没有任何配置的情况下, src下的index.js文件作为打包的入口,输出目录为dist下的<strong>main.js</strong></p></li></ul><h2 id="webpack打包实现"><a href="#webpack打包实现" class="headerlink" title="webpack打包实现"></a>webpack打包实现</h2><p><strong>目标</strong>：</p><ul><li>要把项目中的jquery.js和index.js两个文件打包在一起</li></ul><p><strong>步骤</strong>：</p><ol><li><p>在src/index.js中 引入jquery，  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import  $  from &#39;jquery&#39;</span><br></pre></td></tr></table></figure></li><li><p>执行指令打包  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm  run build</span><br></pre></td></tr></table></figure><p>打包完毕会生成<strong>dist</strong>目录，合并文件默认名称为<strong>main.js</strong></p><p><strong>main.js</strong>文件内容就是jquery.js和index.js的合成体，但是代码都是优化压缩后的</p><ol><li><p>在应用程序文件 src/index.html中<strong>去掉</strong>对于引入 jquery.js 和  src/index.js的引用,</p></li><li><p>直接引入打包好的<strong>dist/main.js</strong>即可</p><img src="https://yhx0507.github.io/wxapp_static/app/1564645976374.png" class=""></li></ol><h2 id="webpack配置打包模式"><a href="#webpack配置打包模式" class="headerlink" title="webpack配置打包模式"></a>webpack配置打包模式</h2><p><strong>目标</strong>给webpack配置打包模式，不配置打包会提示黄色警告</p><p><strong>步骤</strong>：</p><ol><li>项目根目录创建webpack配置文件，名称为 <strong>webpack.config.js</strong>,这是默认的文件</li></ol><ul><li><p>如果你的文件不想叫webpack.config 或者 不想放置在根目录 ,也可以,但是执行打包命令时,需要指定需要打包的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --config 路径</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>给webpack.config.js做如下配置</p><img src="https://yhx0507.github.io/wxapp_static/app/1564647123102.png" class=""><blockquote><p>production： 生产模式，打包的文件是优化压缩的</p><p>development：开发模式，打包的文件有适当的回车、空白、注释</p><p>前期使用development，项目开发完毕即将上线就用production</p></blockquote></li></ol><h2 id="webpack配置入口和出口文件"><a href="#webpack配置入口和出口文件" class="headerlink" title="webpack配置入口和出口文件"></a>webpack配置入口和出口文件</h2><ul><li><strong>目标</strong>将隔行换色的案例改成 黑马头条的 样子</li></ul><p>项目主模板文件：index.html(类似头条项目的 public/index.html)</p><p>项目主入口文件：src/index.js (类似头条项目的 src/main.js)</p><p>项目出口文件：dist/main.js (类似头条项目的 dist/js/chunk***.js)</p><p>现在我们要对入口和出口文件做配置(变为 头条项目的样子)</p><p>入口：src/main.js</p><p>出口：dist/chunk.js</p><p>步骤：</p><ol><li><p>src/index.js文件改名字为  src/main.js</p></li><li><p>给webpack.config.js做如下配置</p><img src="https://yhx0507.github.io/wxapp_static/app/1564647874467.png" class=""></li><li><p>物理打包 npm run build</p><img src="https://yhx0507.github.io/wxapp_static/app/1564647901575.png" class=""></li></ol><h2 id="webpack编译模板页面"><a href="#webpack编译模板页面" class="headerlink" title="webpack编译模板页面"></a>webpack编译模板页面</h2><p><strong>目标</strong>实现html页面中自动引入文件,去除手动方式的引用</p><ul><li>目前给项目做打包处理，要通过手动方式在src/index.html中引入打包好的chunk.js文件，太笨了</li></ul><p>webpack有一个工具，可以实现同时<strong>打包/(复制)</strong>src/index.html到达dist目录，并<strong>自动</strong>就引入chunk.js文件，我们要做到的事情就是直接运行打包好的模板文件即可</p><p>实现步骤：</p><ol><li><p>安装工具, yarn  add  html-webpack-plugin  -D</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure></li><li><p>在webpack.config.js中配置如下信息：,需要注意的是,这是一个<strong>插件</strong>,需要配置在<strong>plugins</strong>选项下</p><img src="https://yhx0507.github.io/wxapp_static/app/1564648594383.png" class=""></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new htmlPlugin(&#123;</span><br><span class="line">         template: path.resolve(&#39;.&#x2F;public&#x2F;index.html&#39;),</span><br><span class="line">         filename:&#39;..&#x2F;index.html&#39; &#x2F;&#x2F; 写入HTML的文件。默认为index.html。您可以在这里指定一个子目录太（如：assets&#x2F;admin.html）</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><ol><li><p>在src/index.html模板中不用引入任何的js文件了</p></li><li><p>做物理打包 npm run build（编译生成模板文件了，并且有自动引入chunk.js文件）</p><img src="https://yhx0507.github.io/wxapp_static/app/1564648645269.png" class=""></li></ol><h2 id="webpack实时打包"><a href="#webpack实时打包" class="headerlink" title="webpack实时打包"></a>webpack实时打包</h2><ul><li><strong>目标</strong>实现 npm run serve 启动项目 实时打包</li></ul><p><strong>注意</strong>：</p><ul><li>项目开发都是对src目录内部的文件进行更新，不要去修改dist打包好的文件</li><li>现在对src内部的任何文件做修改操作后，都需要重新打包，才可以看到对应效果</li><li>webpack本身有一个工具，名称为 <strong>webpack-dev-server</strong>，可以实现随时修改源文件，浏览器随时看到修改后的效果，不需要反复打包，这样就非常好</li><li>webpack-dev-server安装运行起来之后，会给我们创建一个http的<strong>web服务</strong></li></ul><p>步骤：</p><ol><li>安装 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i webpack-dev-server  -D</span><br></pre></td></tr></table></figure><ol><li><p>在webpack.config.js中做如下配置</p><img src="https://yhx0507.github.io/wxapp_static/app/1564650332377.png" class=""></li><li><p>在package.json中做如下配置</p><img src="https://yhx0507.github.io/wxapp_static/app/1564650355528.png" class=""></li></ol><p>现在通过  <strong>npm run serve</strong> 就可以实现 实时打包、实时编译、实时浏览器查看效果了</p><p>注意：</p><ol><li>npm run  serve指令执行后，其是一个“前台”进程，不能关闭</li><li>浏览器看到的实时效果是服务器通过“<strong>内存</strong>”提供的，没有物理文件，也不会生成dist目录</li></ol><h2 id="webpack-loader-运行css文件"><a href="#webpack-loader-运行css文件" class="headerlink" title="webpack-loader-运行css文件"></a>webpack-loader-运行css文件</h2><p><strong>目标</strong>：在当前项目中创建css文件并做引入使用</p><p>步骤：</p><ol><li>创建css文件    src/styles/index.css，  和简单的样式    </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在main.js中引入css文件  ， </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;.&#x2F;styles&#x2F;index.css&#39;</span><br></pre></td></tr></table></figure><p>此时实时打包<strong>报错</strong>了</p><img src="https://yhx0507.github.io/wxapp_static/app/1564650833345.png" class=""><p>错误提示：需要一个适当的<strong>loader</strong>来处理css文件</p><h2 id="webpack-loader-介绍"><a href="#webpack-loader-介绍" class="headerlink" title="webpack-loader-介绍"></a>webpack-loader-介绍</h2><p>webpack很厉害，可以打包处理不同的内容(css/img/less/es6、es7等等)，但是具体处理工作webpack不参与，具体交给手下  loader去处理，loader是小兵，帮助webpack对不同内容做编码、降级处理</p><p>准确定义：</p><p>webpack本身就是一个<strong>打包机器</strong>，其不能对具体代码内容部分进行<strong>处理</strong>(或处理得非常有限)，不同的代码内容(less/scss/ES6(ES7)/image/css等等)需要webpack找到不同的<strong>loader</strong>(装载器)实现转码、编译、降级处理。</p><h2 id="webpack-loader-安装配置css相关loader"><a href="#webpack-loader-安装配置css相关loader" class="headerlink" title="webpack-loader-安装配置css相关loader"></a>webpack-loader-安装配置css相关loader</h2><p><strong>目标</strong> 安装配置css相关的loader</p><ul><li>css内容相关的loader有：style-loader 和 css-loader</li></ul><p>安装配置步骤：</p><ol><li>安装, </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure><ol><li><p>在webpack.config.js中做如下配置</p><img src="https://yhx0507.github.io/wxapp_static/app/1564651455533.png" class=""></li><li><p>现在重新 实时打包  npm  run  serve,发现 css文件的样式已经生效</p></li></ol><p>问：生成好的css内容在哪？</p><p>答：css的loader会把1.css文件的样式内容合并到chunk.js打包文件里边,</p><p>之后应用执行时，chunk.js会把css内容通过style标签的形式嵌入的应用文档内部，样式就生效了</p><img src="https://yhx0507.github.io/wxapp_static/app/1564651786163.png" class=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span><br></pre></td></tr></table></figure><p>上述两个loader配置有严格的”一前一后”顺序，本质执行时，是css-loader在前、style-loader在后，这是固定特点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">style-loader：负责让chunk.js内部的css样式信息通过 style  标签方式 嵌入到应用文档中的</span><br><span class="line">css-loader: 使得index.css文件可以通过import方式引入进来，并合并到chunk.js文件中去</span><br></pre></td></tr></table></figure><p>注意：</p><p>​    webpack给打包处理<strong>独立文件的css</strong>，在index.html模板中设置的行内样式不给处理</p><h2 id="webpack-loader-图片处理和file-loader"><a href="#webpack-loader-图片处理和file-loader" class="headerlink" title="webpack-loader-图片处理和file-loader"></a>webpack-loader-图片处理和file-loader</h2><p><strong>目标</strong>：</p><ul><li>给整个页面设置背景图片 </li></ul><p>步骤：</p><ol><li><p>在assets目录下 放置一张背景图片</p></li><li><p>给#app设置背景图片</p></li><li><p>在index.css样式文件中给div设置背景图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: url('../assets/image/back.jpg');</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在实时打包报错了</p><img src="https://yhx0507.github.io/wxapp_static/app/1564653212048.png" class=""><p>错误说明：图片的引入不ok，需要loader来处理</p></li></ol><h2 id="webpack-loader-安装配置图片相关loader"><a href="#webpack-loader-安装配置图片相关loader" class="headerlink" title="webpack-loader-安装配置图片相关loader"></a>webpack-loader-安装配置图片相关loader</h2><p><strong>目标</strong>  安装配置图片相关的loader</p><p>img图片相关的loader有两个：url-loader   和   file-loader</p><p>安装配置loader步骤：</p><ol><li><p>安装 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure></li><li><p>webpack.config.js中做具体配置，如下</p><img src="https://yhx0507.github.io/wxapp_static/app/1564653666747.png" class=""></li><li><p>现在重新实时打包 npm run serve，发现页面上已经有背景图片效果了</p><img src="https://yhx0507.github.io/wxapp_static/app/image-20191226225123215.png" class=""></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 2) 图片处理loader配置</span></span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,  <span class="comment">// 正则匹配图片文件</span></span><br><span class="line">  <span class="comment">// 遇到图片文件就交给如下loader处理</span></span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// limit:设定大小阀值</span></span><br><span class="line">        <span class="comment">// a. 被处理图片大小 大于该阀值，就通过物理文件重新生成该图片</span></span><br><span class="line">        <span class="comment">// b. 被处理图片大小 小于等于该阀值，就把图片变为字符串(嵌入到应用文档中，好处是节省一个http资源)</span></span><br><span class="line">        limit: <span class="number">8192</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>loader说明：</p><ol><li>只配置url-loader，file-loader不用配置，条件满足后url-loader会自动调用file-loader执行</li><li>limit:8192设置图片判断大小阀值的，一般建议是10k左右，原因是图片变为字符串大小会增加的(过大图片变为字符串我们就没有”利润”了)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url-loader: 负责把 小于等于   阀值的图片变为字符串</span><br><span class="line">file-loader: 负责把 大于阀值  的图片重新以物理文件形成生成在dist目录</span><br></pre></td></tr></table></figure><ul><li>我们也可以只用file-loader来处理这类文件,那么所有的文件都会被拷贝到dist目录下,之前处理的字体图标就是把所有的字体图标都拷贝了过去</li></ul><p>注意：</p><p>​    图片loader只能处理css文件的<strong>背景图片</strong>，而index.html模板中通过img标签做的图片不给处理(只把其当做标签的普通属性了)</p><h3 id="webpack-loader-打包好图片在哪"><a href="#webpack-loader-打包好图片在哪" class="headerlink" title="webpack-loader-打包好图片在哪"></a>webpack-loader-打包好图片在哪</h3><p>现在给项目做物理打包：</p><ol><li><p><strong>小于阈值</strong>小图片就变为<strong>base64</strong>字符串存储，该字符串合并到  chunk.js文件中，应用执行的时候会被通过style标签形式以样式形式呈现</p></li><li><p><strong>大于阈值</strong>大图片就直接生成的dist目录，其是通过具体路径名方式被访问</p><img src="https://yhx0507.github.io/wxapp_static/app/1564654394889.png" class=""></li></ol><p>可以给loader做配置，使得物理图片在dist下的某一个子目录生成出来</p><p>​    <img src="https://yhx0507.github.io/wxapp_static/app/1564654540274.png" class=""></p><blockquote><p>outputPath虽然是file-loader的配置信息，但是可以给url-loader使用，它们内部会有沟通，url-loader会把该参数给到file-loader去使用的</p></blockquote><h3 id="loader-base64字符串图片说明"><a href="#loader-base64字符串图片说明" class="headerlink" title="loader-base64字符串图片说明"></a>loader-base64字符串图片说明</h3><p>webpack把img图片变为字符串后，名称为base64格式字符串</p><p>什么是base64格式？</p><p>答：Base64就是一种基于<strong>64个可打印</strong>字符来<strong>表示二进制数据</strong>的方法。 </p><p>一个图片可以变为二进制数据，该数据再编码为base64格式</p><h2 id="webpack-loader-应用less文件及安装配置less相关loader"><a href="#webpack-loader-应用less文件及安装配置less相关loader" class="headerlink" title="webpack-loader-应用less文件及安装配置less相关loader"></a>webpack-loader-应用less文件及安装配置less相关loader</h2><p><strong>目标</strong>安装配置less相关loader</p><ol><li>创建 src/styles/second.less文件，并设置简单样式 </li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123; </span><br><span class="line">  <span class="selector-tag">li</span>&#123;</span><br><span class="line">       <span class="attribute">border</span>:<span class="number">2px</span> solid orange;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main.js中引入less文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./styles/second.less'</span></span><br></pre></td></tr></table></figure><p>此时实时打包报错，告诉less缺少对应loader来处理</p><img src="https://yhx0507.github.io/wxapp_static/app/image-20191226225841497.png" class=""><p>loader具体为：less-loader、less</p><p>步骤：</p><ol><li>安装依赖包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm  i less-loader  less -D</span><br></pre></td></tr></table></figure><ol><li><p>webpack.config.js做如下配置</p><img src="https://yhx0507.github.io/wxapp_static/app/1564655545661.png" class=""></li><li><p>现在在重新实时打包运行  npm run serve，发现less设置样式已经生效</p></li></ol><h3 id="webpack-loader-less相关loader解读"><a href="#webpack-loader-less相关loader解读" class="headerlink" title="webpack-loader-less相关loader解读"></a>webpack-loader-less相关loader解读</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 3) less处理loader配置</span><br><span class="line">  test: &#x2F;\.less$&#x2F;,</span><br><span class="line">  use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>说明：</p><p>​    less样式文件处理需要3个loader，具体为上述，它们有严格的顺序，它们有做工作交接</p><p>​    它们执行的顺序是颠倒的(less&gt;css&gt;style)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">style-loader：负责生成style标签，把css样式体现出来，之后该标签嵌入到应用文档中去</span><br><span class="line"></span><br><span class="line">css-loader：使得css文件可以通过import引入，并合并到chunk.js中</span><br><span class="line"></span><br><span class="line">less-loader: 该loader负责把less文件内容转变为 css内容</span><br></pre></td></tr></table></figure><p>less样式内容经过loader处理完毕，在哪？</p><p>答：在chunk.js中</p><h2 id="webpack-loader-运行es6标准代码-及babel-loader配置"><a href="#webpack-loader-运行es6标准代码-及babel-loader配置" class="headerlink" title="webpack-loader-运行es6标准代码,及babel-loader配置"></a>webpack-loader-运行es6标准代码,及babel-loader配置</h2><p>应用es6高级标准技术</p><p>步骤：</p><ol><li><p>在main.js中应用es6内容(let、箭头函数、对象解构赋值、…展开运算符、反勾号字符串等等)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./styles/index.css'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./styles/second.less'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> liHtml = []</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">liHtml.push(<span class="string">`&lt;li &gt;我是第<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>个里标签,你看我的颜色!!!!&lt;/li&gt;`</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bossName = <span class="string">'陈浩南'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strTemplate = <span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;我是老大$&#123;bossName&#125;,都听我的!!!&lt;<span class="regexp">/li&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newList = [strTemplate,...liHtml]  <span class="comment">// ES6解构赋值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#app'</span>).append(<span class="string">`&lt;ul&gt;<span class="subst">$&#123;newList.join(<span class="string">""</span>)&#125;</span>&lt;/ul&gt;`</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:even"</span>).css(&#123; <span class="attr">background</span>: <span class="string">'pink'</span>, <span class="attr">color</span>: <span class="string">'#fff'</span>, <span class="attr">fontSize</span>: <span class="string">'30px'</span> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>给项目做物理打包 npm run build</p></li><li><p>发现情况不好，在chunk.js中生成的内容还是es6高级的信息</p><img src="https://yhx0507.github.io/wxapp_static/app/1564656218935.png" class=""><blockquote><p>我们本意是要把es6变为es5的，但是失败了</p></blockquote></li></ol><h3 id="loader-babel-loader和preset和plugin关键字解读"><a href="#loader-babel-loader和preset和plugin关键字解读" class="headerlink" title="loader-babel-loader和preset和plugin关键字解读"></a>loader-babel-loader和preset和plugin关键字解读</h3><p>能够把es6高级内容变为es5的loader名称为 <strong>babel-loader</strong></p><p>实际处理是这样的</p><p>es6/es7/es8等等高级标准有很多(let、箭头函数、对象解构赋值、…展开运算符、反勾号字符串等等)，每个标准都需要一个独立的<strong>plugin</strong>进行降级处理，如果使用许多高级标准内容，那么势必要为此安装许多plugin，这样工作比较繁琐，系统已经考虑到这点了，其通过<strong>preset</strong>把许多<strong>常用</strong>的plugin给做了集合，因此一般性的使用只需要安装preset即可搞定(如果项目应用到了一个生僻的高级标准内容，preset处理不来，就还需要再安装对应的plugin处理)</p><p>let—-降级—-&gt;plugin</p><p>箭头函数—-降级—&gt;plugin</p><img src="https://yhx0507.github.io/wxapp_static/app/1564656632970.png" class=""><h2 id="loader-安装配置loader和preset做降低处理"><a href="#loader-安装配置loader和preset做降低处理" class="headerlink" title="loader-安装配置loader和preset做降低处理"></a>loader-安装配置loader和preset做降低处理</h2><p>babel-loader官网：<a href="https://babel.docschina.org/" target="_blank" rel="noopener">https://babel.docschina.org/</a></p><p>步骤：</p><ol><li><p>安装依赖包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure></li><li><p>在webpack.config.js中做如下配置：</p><img src="https://yhx0507.github.io/wxapp_static/app/1564657371623.png" class=""></li><li><p>在项目根目录创建 babel.config.js文件，配置如下</p><p>作用：使得babel-loader可以找到preset做代码降级处理</p><img src="https://yhx0507.github.io/wxapp_static/app/1564657404441.png" class=""></li><li><p>现在给项目做物理打包 npm run build,发现高级内容已经降级处理了</p><img src="https://yhx0507.github.io/wxapp_static/app/1564657458602.png" class=""></li></ol><h2 id="webpack-安装配置vue-loader处理单文件组件"><a href="#webpack-安装配置vue-loader处理单文件组件" class="headerlink" title="webpack-安装配置vue-loader处理单文件组件"></a>webpack-安装配置vue-loader处理单文件组件</h2><ul><li><p><strong>目标</strong> 配置针对.vue相关的loader,完成一个基本的小项目</p></li><li><p>安装vuejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i vue -S</span><br></pre></td></tr></table></figure><ul><li><p>在src下新建一个App.vue文件 ,写入如下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'app'</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在main.js引入,main.js代码改为如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;).$mount(<span class="string">"#app"</span>)</span><br></pre></td></tr></table></figure></li><li><p>执行npm run serve,发现报错!!!!</p><img src="https://yhx0507.github.io/wxapp_static/app/image-20191226232016306.png" class=""></li></ul></li><li><p>我们需要安装loader依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i  vue-loader  vue-template-compiler vue-style-loader -D</span><br></pre></td></tr></table></figure></li><li><p>. Vue-loader在15.*之后的版本都是 vue-loader的使用都是需要伴生 VueLoaderPlugin的, 所以我们还需要一个操作,安装完毕依赖之后,在配置文件 中 </p><img src="https://yhx0507.github.io/wxapp_static/app/image-20191226233040559.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/image-20191226233054410.png" class=""></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,    <span class="comment">// development 开发模式  prodution 生产模式</span></span><br><span class="line">    entry: path.resolve(<span class="string">'./src/main.js'</span>),     <span class="comment">// 入口</span></span><br><span class="line">    output: &#123;   <span class="comment">// 出口</span></span><br><span class="line">        path: path.resolve(<span class="string">'./dist'</span>),   <span class="comment">// 输出文件目录</span></span><br><span class="line">        filename: <span class="string">'chunk.js'</span>,    <span class="comment">// 输出文件名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(<span class="string">'./index.html'</span>)  <span class="comment">// 打包时自动引入html模板</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].css'</span>,  <span class="comment">// 打包时生成link标签引入css文件名称及目录    </span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    devServer: &#123;    <span class="comment">// 开启热更新模式</span></span><br><span class="line">        port: <span class="number">3003</span>,     <span class="comment">// 开启端口号</span></span><br><span class="line">        open: <span class="literal">true</span>,     <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [    <span class="comment">// 针对不同的资源进行处理</span></span><br><span class="line">            <span class="comment">// &#123;   // 处理css样式</span></span><br><span class="line">            <span class="comment">//     test: /\.css$/,     // 正则表达式，校验文件类型</span></span><br><span class="line">            <span class="comment">//     use: ['style-loader', 'css-loader']   // 三种方式：字符串、</span></span><br><span class="line">            <span class="comment">//                                           // 数组=&gt;数组字符串、数组对象</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    MiniCssExtractPlugin.loader,    <span class="comment">// 把样式抽离成link标签引入</span></span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   <span class="comment">// 处理less样式</span></span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   <span class="comment">// 处理js文件es6语法</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_moudles/</span>,    <span class="comment">// 排除node_modules文件夹下的js文件</span></span><br><span class="line">                use: <span class="string">'babel-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   <span class="comment">// 处理图片</span></span><br><span class="line">                test:<span class="regexp">/\.(png|gif|jpg|jpeg|bmp)$/i</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123; </span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit: <span class="number">8192</span>,     <span class="comment">// 图片的阈值，小于这个阈值转成base64</span></span><br><span class="line">                                            <span class="comment">// 字符转,大于的话使用file-loader生成</span></span><br><span class="line">                                            <span class="comment">// 物理文件,不需要配置file-loader</span></span><br><span class="line">                            outputPath: <span class="string">'img'</span>, <span class="comment">// 输出到指定目录下</span></span><br><span class="line">                            esModule: <span class="literal">false</span>,    <span class="comment">// 该配置项为图片打包后的默认路径,带default</span></span><br><span class="line">                                                <span class="comment">// 对象,默认为ture，在配置项里将此项改</span></span><br><span class="line">                                                <span class="comment">// 为false即可去掉多余的defalut对象</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   <span class="comment">// 处理html文件中的img标签</span></span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                use: <span class="string">'html-withimg-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> Webpack入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie</title>
      <link href="/2018/10/11/Cookie%E5%92%8CSession/"/>
      <url>/2018/10/11/Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="什么是-Cookie？"><a href="#什么是-Cookie？" class="headerlink" title="什么是 Cookie？"></a>什么是 Cookie？</h2><ul><li><p>Cookie 是一些数据, 存储于你电脑上的文本文件中。</p></li><li><p>当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。</p></li></ul><h2 id="Cookie-的作用就是用于解决-“如何记录客户端的用户信息”"><a href="#Cookie-的作用就是用于解决-“如何记录客户端的用户信息”" class="headerlink" title="Cookie 的作用就是用于解决 “如何记录客户端的用户信息”:"></a>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”:</h2><ul><li><p>当用户访问 web 页面时，他的名字可以记录在 cookie 中。</p></li><li><p>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</p></li></ul><h2 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h2><h3 id="原生方法"><a href="#原生方法" class="headerlink" title="原生方法"></a>原生方法</h3><ul><li>设置单个cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">'set-cookie'</span>,<span class="string">'属性名=属性值'</span>);</span><br></pre></td></tr></table></figure><ul><li>设置多个cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">'set-cookie'</span>,[<span class="string">'属性名=属性值'</span>,<span class="string">'属性名=属性值'</span>]);</span><br></pre></td></tr></table></figure><h3 id="Express方法"><a href="#Express方法" class="headerlink" title="Express方法"></a>Express方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(<span class="string">'属性名'</span>,<span class="string">'属性值'</span>,&#123;属性&#125;);</span><br><span class="line"><span class="comment">//这里属性可以设置cookie有限期</span></span><br><span class="line">&#123;</span><br><span class="line">    expires: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() + <span class="number">1000</span>*<span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器获取Cookie"><a href="#服务器获取Cookie" class="headerlink" title="服务器获取Cookie"></a>服务器获取Cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.headers.cookie</span><br><span class="line"><span class="comment">// 注意这里查询到的为'a=1;b=2'字符串</span></span><br></pre></td></tr></table></figure><h3 id="原生方法解析"><a href="#原生方法解析" class="headerlink" title="原生方法解析"></a>原生方法解析</h3><ul><li><p>通过replace方法替换<code>；</code>为<code>&amp;</code>后利用<code>queryString</code>包解析为对象</p></li><li><p>通过<code>cookie-parser</code>包解析</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"><span class="comment">// cookie会保存在req对象中，req.cookies会解析为cookie对象</span></span><br></pre></td></tr></table></figure><h2 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.clearcookie(<span class="string">'属性名'</span>);</span><br></pre></td></tr></table></figure><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h2 id="Express框架处理session"><a href="#Express框架处理session" class="headerlink" title="Express框架处理session"></a>Express框架处理session</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">npm install express-session</span><br><span class="line"><span class="comment">//  引入包</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="comment">//使用包</span></span><br><span class="line">app.use(session(conf))</span><br></pre></td></tr></table></figure><h2 id="设置Session"><a href="#设置Session" class="headerlink" title="设置Session"></a>设置Session</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.属性名 = 属性值</span><br></pre></td></tr></table></figure><h2 id="获取Session"><a href="#获取Session" class="headerlink" title="获取Session"></a>获取Session</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.属性名</span><br></pre></td></tr></table></figure><h2 id="删除Session"><a href="#删除Session" class="headerlink" title="删除Session"></a>删除Session</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue移动端项目总结</title>
      <link href="/2018/03/01/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/01/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue移动项目总结"><a href="#Vue移动项目总结" class="headerlink" title="Vue移动项目总结"></a>Vue移动项目总结</h1><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="使用Vue-cli创建项目"><a href="#使用Vue-cli创建项目" class="headerlink" title="使用Vue-cli创建项目"></a>使用Vue-cli创建项目</h3><pre><code>1、安装脚手架    npm install @vue/cli2、创建项目    vue create 项目名称3、配置项目    对项目初始化进行一些配置    Vue CLI v4.1.2    ? Please pick a preset:    default (babel, eslint)    &gt; Manually select features          选择第2种：手动选择特性，支持更多自定义选项    分别选择：    Babel：es6 转 es5    Router：路由    Vuex：数据容器，存储共享数据    CSS Pre-processors：CSS 预处理器，后面会提示你选择less、sass、stylus等Linter/Formatter：代码格式校验4、进入项目目录       cd 项目名称5、启动服务           npm run serve(dev还是serve看配置)</code></pre><h3 id="初始目录结构说明"><a href="#初始目录结构说明" class="headerlink" title="初始目录结构说明"></a>初始目录结构说明</h3><pre><code>├── .browserslistrc├── .editorconfig├── .eslintrc.js├── .gitignore├── README.md├── babel.config.js├── package-lock.json├── package.json├── public│   ├── favicon.ico│   └── index.html└── src    ├── App.vue       根组件    ├── assets        资源目录    ├── components    公共组件    ├── main.js       入口模块    ├── router        路由    ├── store         Vuex容器    └── views         路由组件</code></pre><h3 id="代码的管理Git"><a href="#代码的管理Git" class="headerlink" title="代码的管理Git"></a>代码的管理Git</h3><pre><code>正常的话我们需要创建 Git 仓库并提交历史记录。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add 文件</span><br><span class="line">git commit<span class="string">"提交日志"</span></span><br></pre></td></tr></table></figure>但是Vue-cli 在生成项目的时候默认完成了Git仓库的初始化和初始提交，所以这里只需要push到线上即可。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add 你的远程仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>之后如果需要提交，则还是常规的add、commit、push。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 文件</span><br><span class="line">git commit -m <span class="string">"提交日志"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></code></pre><h3 id="组件库导入（Vant组件库）"><a href="#组件库导入（Vant组件库）" class="headerlink" title="组件库导入（Vant组件库）"></a>组件库导入（Vant组件库）</h3><pre><code>这里建议为了前期开发的便利性先一次性导入所有 Vant 组件，在最后做打包优化的时候配置按需加载以降低打包体积大小1、安装 Vant<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vant -S</span><br></pre></td></tr></table></figure>2、在main.js中加载注册Vant组件（注意要引入Vant样式文件）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局引入（体积包比较大）</span></span><br><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'vant/lib/index.css'</span> </span><br><span class="line">Vue.use(Vant)</span><br><span class="line"><span class="comment">// 引入vant组件,这里我们动态加载（推荐）</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./utils/register-vant'</span></span><br></pre></td></tr></table></figure>3、按需加载组件   在utils中新建Vant组件加载文件vant-register.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Button, Cell, CellGroup</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"><span class="comment">// 全剧注册组件</span></span><br><span class="line">Vue.use(Button).use(Cell).use(CellGroup)</span><br></pre></td></tr></table></figure></code></pre><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><pre><code>1、样式初始化组件包    Normalize.css只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案Normalize.css现在已经被用于Twitter Bootstrap以及许许多多其他框架、工具和网站上    1、安装    <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i normalize.css</span><br></pre></td></tr></table></figure>    2、在main.js中引入    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'normalize.css'</span></span><br></pre></td></tr></table></figure>    但是我们的项目不需要加载它,不是不需要，因为我们使用了第三方组件库Vant,它内置了normalize.css，所以我们不需要自己手动安装配置它了。2、配置Rem适配Vant中的样式默认使用`px`作为单位，如果需要使用rem单位推荐使用两个工具    postcss-pxtorem:用于将单位转化为rem    amfe-flexible:用于设置rem基准值    使用amfe-flexible动态设置 REM 基准值（html 标签的字体大小）    1、安装    <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i amfe-flexible</span><br></pre></td></tr></table></figure>    2、然后在 `main.js` 中加载执行该模块    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'amfe-flexible'</span></span><br></pre></td></tr></table></figure>    使用postcss-pxtorem将 px 转为 rem    1、安装    <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-pxtorem -D</span><br></pre></td></tr></table></figure>    2、然后在**项目根目录**中创建`postcss.config.js`文件    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">"postcss-pxtorem"</span>: &#123;</span><br><span class="line">      <span class="comment">// 设计稿 375:37.5</span></span><br><span class="line">      <span class="comment">// 设计稿：750:75</span></span><br><span class="line">      <span class="comment">// Vant 是基于 375</span></span><br><span class="line">      rootValue: <span class="number">37.5</span>,</span><br><span class="line">      propList: [<span class="string">"*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    3、**配置完毕，重新启动服务**</code></pre><h3 id="项目中axios配置"><a href="#项目中axios配置" class="headerlink" title="项目中axios配置"></a>项目中axios配置</h3><pre><code>1、安装axios<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>2、创建src/utils/request.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="comment">// axios.create 方法：复制一个axios,可以直接配置基础路径</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">"请求基础路径"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 最后导出我们复制的request</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure>3、如何使用把每一个请求都封装成一个的独立功能函数，在独立的功能函数中导出请求方法，在需要的时候加载调用即可<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    method: <span class="string">'GET'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>4、axios中的请求、响应拦截问题(包含处理token问题)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求拦截</span></span><br><span class="line">request.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = store.state.user</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;user.token&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置响应拦截</span></span><br><span class="line">request.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response</span><br><span class="line">&#125;, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否是401</span></span><br><span class="line">  <span class="keyword">if</span> (error.response &amp;&amp; error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = store.state.user</span><br><span class="line">    <span class="comment">// 判断是否有refresh_token</span></span><br><span class="line">    <span class="keyword">if</span> (!user || !user.refresh_token) &#123;</span><br><span class="line">      <span class="comment">// 没有refresh_token直接跳转登录</span></span><br><span class="line">      reLogin()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 有refresh_token重新获取token</span></span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">        url: <span class="string">'http://ttapi.research.itcast.cn/app/v1_0/authorizations'</span>,</span><br><span class="line">        method: <span class="string">'PUT'</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: <span class="string">`Bearer <span class="subst">$&#123;user.refresh_token&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 重新赋值token</span></span><br><span class="line">      store.commit(<span class="string">'setUser'</span>, &#123;</span><br><span class="line">        ...user,</span><br><span class="line">        token: data.data.token</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 继续之前的请求</span></span><br><span class="line">      <span class="keyword">return</span> request(error.config)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求刷新失败'</span>, err)</span><br><span class="line">      reLogin()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reLogin</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  router.push(&#123;</span><br><span class="line">    name: <span class="string">'Login'</span>,</span><br><span class="line">    query: &#123;</span><br><span class="line">      redirect: router.currentRoute.fullPath</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="项目中路由表的配置"><a href="#项目中路由表的配置" class="headerlink" title="项目中路由表的配置"></a>项目中路由表的配置</h2><pre><code>1、配置路由表<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">// 在全局注册路由</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">// 实例化路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 配置路由规则</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'Login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>2、在main.js中引入路由并注册路由<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></code></pre><h2 id="表单验证问题（vee-validate插件）https-logaretm-github-io-vee-validate"><a href="#表单验证问题（vee-validate插件）https-logaretm-github-io-vee-validate" class="headerlink" title="表单验证问题（vee-validate插件）https://logaretm.github.io/vee-validate/"></a>表单验证问题（vee-validate插件）<a href="https://logaretm.github.io/vee-validate/" target="_blank" rel="noopener">https://logaretm.github.io/vee-validate/</a></h2><pre><code>1、安装<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vee-validate</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、创建 <span class="string">`utils/validation.js`</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 加载需要使用的验证组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; ValidationProvider, ValidationObserver, extend &#125; <span class="keyword">from</span> <span class="string">'vee-validate'</span></span><br><span class="line"><span class="comment">// 加载内置的验证规则</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rules <span class="keyword">from</span> <span class="string">'vee-validate/dist/rules'</span></span><br><span class="line"><span class="comment">// 加载中文语言包</span></span><br><span class="line"><span class="keyword">import</span> &#123; messages &#125; <span class="keyword">from</span> <span class="string">'vee-validate/dist/locale/zh_CN.json'</span></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">'ValidationProvider'</span>, ValidationProvider)</span><br><span class="line">Vue.component(<span class="string">'ValidationObserver'</span>, ValidationObserver)</span><br><span class="line"><span class="comment">// 配置验证规则和中文提示</span></span><br><span class="line"><span class="built_in">Object</span>.keys(rules).forEach(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span><br><span class="line">  extend(rule, &#123;</span><br><span class="line">    ...rules[rule],</span><br><span class="line">    message: messages[rule]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>3、在main.js加载执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./utils/validation.js'</span></span><br></pre></td></tr></table></figure>4、基本使用（使用内置验证规则或自定义验证规则）    使用ValidationObserver把需要校验的整个表单包起来    使用ValidationProvider把需要校验的具体表单元素包起来，例如 input    通过ValidationProvider配置具体的校验规则    - name配置验证字段的名称    - rules验证规则      - rules=&quot;requried&quot;单个验证规则      - rules=&quot;required|length:4&quot;多个验证规则使用|分隔    - v-slot=&quot;{ errors }&quot;获取错误消息，使用errors[0]绑定展示错误消息    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加自定义验证规则</span></span><br><span class="line">extend(<span class="string">'positive'</span>, value =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用验证规则</span></span><br><span class="line"><span class="keyword">import</span> &#123; validate &#125; <span class="keyword">from</span> <span class="string">'vee-validate'</span></span><br><span class="line"><span class="comment">// 参数1：要验证的数据 参数2：验证规则</span></span><br><span class="line"><span class="comment">// 参数3：一个可选的配置对象，例如配置错误消息字段名称 name</span></span><br><span class="line"><span class="comment">// 返回值：&#123; valid, errors, ... &#125;</span></span><br><span class="line"><span class="comment">//          valid: 验证是否成功，成功 true，失败 false</span></span><br><span class="line"><span class="comment">//          errors：一个数组，错误提示消息</span></span><br><span class="line">validate(mobile, <span class="string">'required|mobile'</span>, &#123;</span><br><span class="line">  name: <span class="string">'手机号'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>5、手动触发验证规则（通过this.$refs.myform.errors获取错误信息）    给ValidationObserver组件添加一个ref属性    调用组件的validate方法    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> success = <span class="keyword">await</span> <span class="keyword">this</span>.$refs.form.validate()</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 移动项目 </tag>
            
            <tag> 总结 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于小程序开发的总结</title>
      <link href="/2018/02/27/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2018/02/27/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1、navigationBar在哪配置？配置了个啥？"><a href="#1、navigationBar在哪配置？配置了个啥？" class="headerlink" title="1、navigationBar在哪配置？配置了个啥？"></a>1、navigationBar在哪配置？配置了个啥？</h2><ul><li>app.json中配置；顶部栏（背景色、名字、名字）<img src="https://yhx0507.github.io/wxapp_static/app/1582766481284.png" class=""></li></ul><h2 id="2、tabBar是什么？-list字段中每一项都是什么？"><a href="#2、tabBar是什么？-list字段中每一项都是什么？" class="headerlink" title="2、tabBar是什么？/  list字段中每一项都是什么？"></a>2、tabBar是什么？/  list字段中每一项都是什么？</h2><ul><li>tab栏；（导航栏，项：设置每一个功能）</li><li>ist字段：配置每一项；<ul><li>text：选项文字</li><li>iconPath：图标路径，相对路径</li><li>selectedIconPath: 当前选择项的图标路径</li><li>pagePath：选项卡点击后的页面地址；</li></ul></li></ul><h2 id="3、如何理解小程序rpx单位？实际开发中有什么要求？"><a href="#3、如何理解小程序rpx单位？实际开发中有什么要求？" class="headerlink" title="3、如何理解小程序rpx单位？实际开发中有什么要求？"></a>3、如何理解小程序rpx单位？实际开发中有什么要求？</h2><ul><li>rpx：不同的手机屏幕下，代表的px值；自动识别手机的；</li><li>要求：UI给我们的页面750px的设计稿，然后写页面 测量360px，在小程序里面写360rpx;</li></ul><h2 id="4、小程序预览需要设置什么？"><a href="#4、小程序预览需要设置什么？" class="headerlink" title="4、小程序预览需要设置什么？"></a>4、小程序预览需要设置什么？</h2><ul><li>图片，打包后超过2M</li><li>本地图片：开始的时候帮助我们搭建静态页；</li><li>地址：<ul><li>项目中图片，字体文件，后台请求回来的网络地址；</li><li>tabBar图片不能上传；本地地址支持；</li></ul></li><li>预览：设置一个忽略！</li><li>**打包的设置：packOptions：打包设置  ignore：忽略打包编译项目：<img src="https://yhx0507.github.io/wxapp_static/app/1581078423738.png" class=""></li><li>文档<img src="https://yhx0507.github.io/wxapp_static/app/1580476153224.png" class=""></li><li>找到：packOptions /ignore<img src="https://yhx0507.github.io/wxapp_static/app/1580476204285.png" class=""></li></ul><h2 id="5、如何设置为体验版本？"><a href="#5、如何设置为体验版本？" class="headerlink" title="5、如何设置为体验版本？"></a>5、如何设置为体验版本？</h2><ul><li>为什么设置体验版？<ul><li>开发人员</li><li>测试人员；</li></ul></li><li>测试人员：看到我们现在写的项目；</li><li>成员管理：体验成员管理；</li><li>代码:<ul><li>上传到微信小程序后台管理平台；</li><li>版本管理：设置为体验版本！</li></ul></li></ul><h2 id="6、小程序V2样式有什么问题么？"><a href="#6、小程序V2样式有什么问题么？" class="headerlink" title="6、小程序V2样式有什么问题么？"></a>6、小程序V2样式有什么问题么？</h2><ul><li>问题：<ul><li>按钮：默认宽度；</li><li>自己设置又设置了一个宽度；</li></ul></li><li>发现：<ul><li>现在自己定义这个宽度在调试窗口已经生效；原来的默认宽度被覆盖！</li><li>在显示界面：宽度还是 默认宽度；</li><li>CSS权重问题！</li></ul></li><li>思考:<ul><li>忘记不使用v2</li><li>发现你的布局样式有问题，是不是V2问题？</li></ul></li></ul><h2 id="7、小程序wx-for-quot-item-in-list-quot-这样对么？设置唯一标示如何设置？"><a href="#7、小程序wx-for-quot-item-in-list-quot-这样对么？设置唯一标示如何设置？" class="headerlink" title="7、小程序wx:for=&quot;item in list&quot;这样对么？设置唯一标示如何设置？"></a>7、小程序<code>wx:for=&quot;item in list&quot;</code>这样对么？设置唯一标示如何设置？</h2><ul><li>vue写法：<code>v-for=&quot;item in list&quot;</code></li><li>正确：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx:for&#x3D;&#123;&#123;list&#125;&#125;     &#x2F;&#x2F;注意&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li>唯一标示：<ul><li>用数据的index,ID</li><li><code>wx:key=&quot;*this&quot;</code>：找不到唯一标示；</li></ul></li></ul><h2 id="8、多个标签被同时循环或者被判断if-，应该如何设置？"><a href="#8、多个标签被同时循环或者被判断if-，应该如何设置？" class="headerlink" title="8、多个标签被同时循环或者被判断if ，应该如何设置？"></a>8、多个标签被同时循环或者被判断if ，应该如何设置？</h2><ul><li>wx:if</li><li>组件：<code>&lt; block &gt;</code><ul><li>被同时循环或者被判断if的组件，包起来！</li><li>在block上写wx语法；</li></ul></li></ul><h2 id="9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？"><a href="#9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？" class="headerlink" title="9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？"></a>9、原生小程序的事件回调函数可以传入参数么？如何设置获取组件上自定义属性？</h2><ul><li>不能传入参数：语法设置不能传入；</li><li>自定义数据：<ul><li>如何设置：<code>data-xxxx</code></li><li>获取：事件执行的回调，需要事件对象；<code>e.target.dataset</code>获取自定义属性的（键值对）</li><li>意思：<strong>相当于是我们给组件通过另外的形式传入 参数</strong></li></ul></li></ul><h2 id="10、小程序更新数据，使用哪个方法？"><a href="#10、小程序更新数据，使用哪个方法？" class="headerlink" title="10、小程序更新数据，使用哪个方法？"></a>10、小程序更新数据，使用哪个方法？</h2><ul><li><code>this.setData({要更新的数据})</code></li></ul><h2 id="11、请求是哪个方法？上线后如何配置？本地开发时如何配置？"><a href="#11、请求是哪个方法？上线后如何配置？本地开发时如何配置？" class="headerlink" title="11、请求是哪个方法？上线后如何配置？本地开发时如何配置？"></a>11、请求是哪个方法？上线后如何配置？本地开发时如何配置？</h2><ul><li><code>wx.request();</code></li><li>平台：配置 request合法域名请求<img src="https://yhx0507.github.io/wxapp_static/app/1580542989630.png" class=""></li><li>本地开发：IDE测试的时候<img src="https://yhx0507.github.io/wxapp_static/app/1582770103590.png" class=""></li></ul><h2 id="12、事件执行的三个阶段？为什么要阻止冒泡？"><a href="#12、事件执行的三个阶段？为什么要阻止冒泡？" class="headerlink" title="12、事件执行的三个阶段？为什么要阻止冒泡？"></a>12、事件执行的三个阶段？为什么要阻止冒泡？</h2><ul><li>事件执行三个阶段：捕获、达到目标、冒泡阶段；</li><li>事件默认是在冒泡阶段执行；<ul><li>不阻止：<ul><li>子组件注册了tap事件</li><li>父级注册了tap事件</li><li>当我们触发子级，父级也会跟着触发；<ul><li>用户知道自己点对了：点的就是子级</li><li>父级跟着触发的这个情况：<strong>给用户体验不好</strong>，阻止冒泡！<img src="https://yhx0507.github.io/wxapp_static/app/1582770636547.png" class=""></li></ul></li></ul></li></ul></li></ul><h2 id="13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？"><a href="#13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？" class="headerlink" title="13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？"></a>13、小程序场景值：打开方式有什么用处？小程序场景值在哪获取？</h2><ul><li>打开方式：扫一扫、搜索、转发；哪种统计次数更多的话，调整公司策略；</li><li>onLaunch() : <ul><li>事件对象获取场景值；</li><li>打开方式业务在onLaunch写；单独写函数；在onLaunch调用；</li></ul></li></ul><h2 id="14、页面地址的参数如何传递？如何获取？"><a href="#14、页面地址的参数如何传递？如何获取？" class="headerlink" title="14、页面地址的参数如何传递？如何获取？"></a>14、页面地址的参数如何传递？如何获取？</h2><ul><li>小程序有很多页面；</li><li>ugo：分类商品。点击每个商品的时候，进入一个详情页（同一个页面，不同的数据）；</li><li>传递：<code>pages/detail/index?name=zs&amp;age=18</code></li><li>获取：<ul><li>页面<code>onLoad(e){}</code>事件对象可以获取 页面传递的参数；</li><li>接下来：请求数据，返回这个查询的数据，渲染；</li></ul></li></ul><h2 id="15、小程序-模块化有几种方式？"><a href="#15、小程序-模块化有几种方式？" class="headerlink" title="15、小程序 模块化有几种方式？"></a>15、小程序 模块化有几种方式？</h2><ul><li>第三方包：npm包；用别人写好的东西；</li><li>入口主文件 app.js<ul><li>其他页面使用：<code>getApp()</code>推荐！</li><li>app.js 里面写什么：<img src="https://yhx0507.github.io/wxapp_static/app/1580718071548.png" class=""></li><li>在任何页面的JS中使用：<img src="https://yhx0507.github.io/wxapp_static/app/1580718169881.png" class=""></li></ul></li></ul><h2 id="16、小程序npm模块如何配置和使用？"><a href="#16、小程序npm模块如何配置和使用？" class="headerlink" title="16、小程序npm模块如何配置和使用？"></a>16、小程序npm模块如何配置和使用？</h2><ul><li>第三方包：npm包；用别人写好的东西；</li><li>封装比较好，功能丰富！</li><li>项目的目录下：<ul><li><code>npm  init --yes</code></li><li><code>npm i xxx -S</code></li><li>点击  <strong>微信开发工具 / 工具 / 构建npm</strong><img src="https://yhx0507.github.io/wxapp_static/app/1580717065354.png" class=""></li><li>详情  /  本地设置**：使用npm模块<img src="https://yhx0507.github.io/wxapp_static/app/1580717147899.png" class=""></li><li>测试：<img src="https://yhx0507.github.io/wxapp_static/app/1580717283875.png" class=""></li></ul></li><li>了解：小程序寻找包的规则：在JS页面中使用<code>require</code><ul><li>优先：寻找<code>miniprogram_npm</code>下的包</li><li>如果没有，则找当前路径下，有没有这个名字的JS文件</li><li>如果没有，则页面报错找不到；</li></ul></li></ul><h2 id="17、wxs在渲染层起到什么作用？"><a href="#17、wxs在渲染层起到什么作用？" class="headerlink" title="17、wxs在渲染层起到什么作用？"></a>17、wxs在渲染层起到什么作用？</h2><ul><li>小程序：<ul><li>渲染层 + JS逻辑层:  没有直接的关联；</li></ul></li><li>需求：页面数据 返回的 时间戳 ；需要转换为 时间格式</li><li>JS逻辑层：处理时间戳，有可能会改变源数据；</li><li>想要：时间格式能显示，又不改变源数据！</li><li>渲染层：<strong>wxml wxss wxs:(可以理解微信自己的特有的为HTML CSS  JS )</strong></li><li>代码:<br>  执行函数(time)<ul><li>如果<code>执行函数</code>是真实页面下JS内一个方法；就不会生效！</li><li><code>自定义函数</code>可以设置为 wxs下的一个方法：就可以使用  </li></ul></li><li>思考：<strong>wxs当做：vue中常说 filter 过滤器；</strong></li></ul><h2 id="18、通信的思考：数据共享"><a href="#18、通信的思考：数据共享" class="headerlink" title="18、通信的思考：数据共享!!!"></a>18、通信的思考：数据共享!!!</h2><ul><li>组件：<ul><li>父子组件！</li><li>组件之间如何通信？</li></ul></li><li>子组件：设置自定义属性：<ul><li><strong>自己笔记：理解写下来！</strong></li></ul></li><li>思考：<ul><li><strong>兄弟组件之间如何通信？getApp();</strong></li><li>背后：为了共享一些数据：</li><li>vue:共享数据；<ul><li>eventbus</li><li>找个自己写的公共的JS文件；</li><li>localStorage</li></ul></li></ul></li><li>新的语法：<ul><li>语法，思考语法能帮助实现啥？</li><li><strong>写例子：todoList(增 删 改 查)</strong> <a href="http://www.todolist.cn/" target="_blank" rel="noopener">http://www.todolist.cn/</a></li></ul></li></ul><h2 id="19、通信：父给子传递数据，子组件需要设置什么？"><a href="#19、通信：父给子传递数据，子组件需要设置什么？" class="headerlink" title="19、通信：父给子传递数据，子组件需要设置什么？"></a>19、通信：父给子传递数据，子组件需要设置什么？</h2><ul><li>子级：接受数据，设置属性：<img src="https://yhx0507.github.io/wxapp_static/app/1580733828085.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1582774635403.png" class=""></li></ul><h2 id="20、组件通信：子给父传递数据，子组件需要设置什么？"><a href="#20、组件通信：子给父传递数据，子组件需要设置什么？" class="headerlink" title="20、组件通信：子给父传递数据，子组件需要设置什么？"></a>20、组件通信：子给父传递数据，子组件需要设置什么？</h2><ul><li>理解：子组件自定义事件名称，及要发送数据；</li><li>语法：<img src="https://yhx0507.github.io/wxapp_static/app/1582774593628.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1582774604003.png" class=""></li></ul><h2 id="21、表单：如何获取输入框的数据？如何获取单-多选择框的数据？"><a href="#21、表单：如何获取输入框的数据？如何获取单-多选择框的数据？" class="headerlink" title="21、表单：如何获取输入框的数据？如何获取单/多选择框的数据？!!!"></a>21、表单：如何获取输入框的数据？如何获取单/多选择框的数据？!!!</h2><ul><li>表单输入类：<ul><li>form：<ul><li>form本身 绑定事件submit事件 </li><li>form 下面按钮：<code>form-type</code><img src="https://yhx0507.github.io/wxapp_static/app/1582775047238.png" class=""></li></ul></li><li>获取表单数据：<ul><li>input 组件  name属性</li><li>在submit回调函数 的事件 对象里获取；<code>ev.detail.value</code></li></ul></li></ul></li><li>单/多选择：<ul><li>单/多选择组 （组件）绑定 change 事件</li><li>change 事件回调函数 拿到单多选的数据；</li><li>拿到数据通过 this.setData（）设置到初始化数据中</li><li>在form 的submit 事件的回调函数内可以拿到数据:<img src="https://yhx0507.github.io/wxapp_static/app/1580804605204.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1580804994859.png" class=""></li></ul></li></ul><h2 id="22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？"><a href="#22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？" class="headerlink" title="22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？"></a>22、ugo主页搜索组件覆盖整个页面，主页页面的滚动条，如何解决没有滚动条？</h2><ul><li>问题：<ul><li>搜索是按照一个组件的形式；页面中一个标签！</li><li>布局：把整个页面覆盖住，主页上组件大多了；会出现滚动条！<img src="https://yhx0507.github.io/wxapp_static/app/1582784107740.png" class=""></li></ul></li><li>解决过程：<ul><li>搜索组件处于聚焦状态的时候，</li><li>获取下窗口显示的高度，</li><li>通过父子组件通信：把获取的高度传递回去；</li><li>父级页面中可以获取高度H！</li><li>设置页面高pageH度为  H；样式上：设置溢出隐藏！</li></ul></li><li>其他思路：<ul><li>主页上搜索的地方放入组件input；注册事件；点击；</li><li>触发事件后：转跳另外一个页面；</li><li>可以规避滚动条问题！</li><li>体验不如上一个：转跳的时候会有短暂的白页面！</li></ul></li></ul><h2 id="23、下拉刷新需要配置么，接下来的业务是什么，如何实现？"><a href="#23、下拉刷新需要配置么，接下来的业务是什么，如何实现？" class="headerlink" title="23、下拉刷新需要配置么，接下来的业务是什么，如何实现？"></a>23、下拉刷新需要配置么，接下来的业务是什么，如何实现？</h2><ul><li>配置：<ul><li>需要配置；<ul><li>原生：index.json</li><li>uni: pages.json<img src="https://yhx0507.github.io/wxapp_static/app/1582785590870.png" class=""></li></ul></li><li>在哪？订单页，支付页，商品分类页！！页面下JSON文件；每一个小程序页面也可以使用 <code>.json</code> 文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enablePullDownRefresh:true</span><br></pre></td></tr></table></figure></li><li>开启：效果！！！</li></ul></li><li>业务：<ul><li>用户：下拉是个行为；</li><li>函数：响应这个行为；生命周期（函数）！<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    onPullDownRefresh()&#123; 所有数据进行重新请求一次&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>请求：异步<ul><li>uni-app：async await;</li><li>原生开发：所有的异步都完成后，结束下拉效果；<ul><li><strong>封装promise；</strong></li><li>promise.all[].then(function(结束下拉效果))      </li></ul></li></ul></li></ul></li></ul><h2 id="24、多次触底多次加载，如何解决这个问题？"><a href="#24、多次触底多次加载，如何解决这个问题？" class="headerlink" title="24、多次触底多次加载，如何解决这个问题？"></a>24、多次触底多次加载，如何解决这个问题？</h2><ul><li>解决1：<img src="https://yhx0507.github.io/wxapp_static/app/1582785979764.png" class=""></li><li>解决2：<ul><li>请求插件封装！</li><li>优化：loading层加载（api：设置mask 遮罩！透明黑色层，用户防止用户再次触发屏幕！)</li></ul></li></ul><h2 id="25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？"><a href="#25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？" class="headerlink" title="25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？"></a>25、什么是区域滚动和页面滚动？区域滚动的应用场景有哪些？</h2><ul><li>小程序：页面滚动<ul><li>区域滚动：组件内可以形成一个滚动；特有的组件 <scroll-view><img src="https://yhx0507.github.io/wxapp_static/app/1582786318936.png" class=""></li></ul></li><li>通过css：overflow属性，bug：当你滑动屏幕的时候，不知道大家要让哪个部分滑动；</li><li>区域滚动的应用场景有哪些？<ul><li>横向很长导航栏；<img src="https://yhx0507.github.io/wxapp_static/app/1582786576338.png" class=""></li><li>ugo：搜索确认栏布局<img src="https://yhx0507.github.io/wxapp_static/app/1582786656808.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/1582786780828.png" class=""></li></ul></li></ul><h2 id="26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？"><a href="#26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？" class="headerlink" title="26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？"></a>26、路由：转跳到非tabBar页的方式有哪几种？转跳到tabBar页的方式有哪几种？</h2><ul><li>转跳到 非tabBar<ul><li>组件：<code>&lt;navigator url=&quot;/pages/goods/index&quot;&gt;</code></li><li>JS：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url:<span class="string">"/pages/goods/index"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li>转跳到 tabBar<ul><li>组件：<code>&lt;navigator url=&quot;/pages/goods/index&quot; open-type=&quot;switchTab&quot;&gt;</code></li><li>JS：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.switchTab(&#123;</span><br><span class="line">url:&quot;&#x2F;pages&#x2F;goods&#x2F;index&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li>回到上一页：<code>wx.navigateBack()</code></li></ul><h2 id="27、小程序的页面默认支持转发么？如何配置自定义转发？"><a href="#27、小程序的页面默认支持转发么？如何配置自定义转发？" class="headerlink" title="27、小程序的页面默认支持转发么？如何配置自定义转发？"></a>27、小程序的页面默认支持转发么？如何配置自定义转发？</h2><ul><li>页面：广告页！订单页，个人用户信息页！默认不支持；</li><li>开启：<ul><li>配置：<code>uni.showShareMenu();</code>  只是开启，不是自定义；（低配版）</li><li><strong>自定义转化</strong>：默认转发的时候，样子太丑，用户不敢点击，页面的一个生命周期函数；需要返回一个对象，包括下面：（美化版）<ul><li>转化的标题</li><li>图片（经过设计的图片）</li><li>链接地址；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onShareAppMessage () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        title: &#39;欢迎使用UGO!&#39;,</span><br><span class="line">        imageUrl: &#39;http:&#x2F;&#x2F;www.999zx.cn&#x2F;adm_file&#x2F;fck</span><br><span class="line">                  &#x2F;images&#x2F;2018&#x2F;4&#x2F;Image&#x2F;20184386447866.jpg&#39;,</span><br><span class="line">        path: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？"><a href="#28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？" class="headerlink" title="28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？"></a>28、获取用户隐私信息使用哪个组件和属性设置？获取非隐私信息使用哪个组件？</h2><ul><li><strong>用户隐私：需要让用户自己点；</strong>  <code>&lt;button open-type&gt;</code><img src="https://yhx0507.github.io/wxapp_static/app/1582788559017.png" class=""></li><li>非隐私信息：头像，昵称，性别，国际，语言！type有属性值：<img src="https://yhx0507.github.io/wxapp_static/app/1582788641819.png" class=""></li></ul><h2 id="29、ugo购物车结算前，需要做什么验证？"><a href="#29、ugo购物车结算前，需要做什么验证？" class="headerlink" title="29、ugo购物车结算前，需要做什么验证？"></a>29、ugo购物车结算前，需要做什么验证？</h2><ul><li>三个验证：<ul><li>收货地址：</li><li>结算商品：</li><li>token：当前谁要买这个商品的这个用户 ，标识加密字符串的标识；<ul><li>没有token：token获取流程；用户登录获取token的整个流程？<img src="https://yhx0507.github.io/wxapp_static/app/1582789158440.png" class=""></li></ul></li></ul></li><li>code ：<ul><li>为了安全！</li><li>如果token泄露了，其他人拿到 A君的token ，结算！</li><li>有个平台小额免密支付：用该用户的A君 token 支付；</li></ul></li></ul><h2 id="30、组件web-view有啥作用？"><a href="#30、组件web-view有啥作用？" class="headerlink" title="30、组件web-view有啥作用？"></a>30、组件web-view有啥作用？</h2><ul><li>web-view：src：引入外面域名地址；</li><li>可以通过小程序直接内引入 已经写好的HTML5移动端页面；</li><li>个人不支持：web-view</li><li>好处：应急！HTML5网页；</li><li>开发的时候：配置<img src="https://yhx0507.github.io/wxapp_static/app/1582770103590.png" class=""></li></ul><h2 id="31、什么是微信网页？有什么特别的地方？"><a href="#31、什么是微信网页？有什么特别的地方？" class="headerlink" title="31、什么是微信网页？有什么特别的地方？"></a>31、什么是微信网页？有什么特别的地方？</h2><ul><li>面试：公众号开发！前端！</li><li>微信网页：HTNL CSS JS移动端页面</li><li>特别的地方：<ul><li>没有什么特别地方：本身来说，就是HTML页面放入公众号了；</li><li>特别地方：<ul><li>放入公众号，可以用一些微信特别的功能；JS-SDK</li><li>拍照、录音等！</li></ul></li></ul></li><li>思路：<ul><li>过去：没有小程序，网页有些特别的功能，JS-SDK JS包；</li><li>现在：小程序，提供了非常丰富的API；</li></ul></li></ul><h2 id="32、使用JS-SDK的获取验证的整个流程？（从前到后）"><a href="#32、使用JS-SDK的获取验证的整个流程？（从前到后）" class="headerlink" title="32、使用JS-SDK的获取验证的整个流程？（从前到后）"></a>32、使用JS-SDK的获取验证的整个流程？（从前到后）</h2><img src="https://yhx0507.github.io/wxapp_static/app/1582789999257.png" class=""><ul><li>验证：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>,  <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert</span></span><br><span class="line">                <span class="comment">// 出来，若要查看传入的参数，可以在pc端打开，参数信</span></span><br><span class="line">                <span class="comment">// 息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>使用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="33、-quot-errMsg-quot-chooselmage-fail-permission-value-is-offline-verifying-quot-这个报错是什么意思？"><a href="#33、-quot-errMsg-quot-chooselmage-fail-permission-value-is-offline-verifying-quot-这个报错是什么意思？" class="headerlink" title="33、{&quot;errMsg&quot;chooselmage:fail, permission value is offline verifying&quot;} 这个报错是什么意思？"></a>33、<code>{&quot;errMsg&quot;chooselmage:fail, permission value is offline verifying&quot;}</code> 这个报错是什么意思？</h2><ul><li>用的这个API方法没有登记；</li><li>在哪登记？ config方法下面 <strong>jsApiList</strong> ：[“chooselmage”]</li></ul><h2 id="34、WeUI是什么？可以在非微信网页使用么？"><a href="#34、WeUI是什么？可以在非微信网页使用么？" class="headerlink" title="34、WeUI是什么？可以在非微信网页使用么？"></a>34、WeUI是什么？可以在非微信网页使用么？</h2><ul><li>CSS样式库；微信团队已经写好的CSS样式；</li><li>非微信网页使用：当然可以！！！</li><li>移动端：样式像微信；WeUI</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组常用方法，掌握这些就够了</title>
      <link href="/2017/12/15/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%8C%E6%8E%8C%E6%8F%A1%E8%BF%99%E4%BA%9B%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
      <url>/2017/12/15/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%8C%E6%8E%8C%E6%8F%A1%E8%BF%99%E4%BA%9B%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数组遍历的一些方法"><a href="#数组遍历的一些方法" class="headerlink" title="数组遍历的一些方法"></a>数组遍历的一些方法</h1><h2 id="1、forEach方法"><a href="#1、forEach方法" class="headerlink" title="1、forEach方法"></a>1、forEach方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">forEach(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//数组处理代码  </span></span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">/*对数组进行遍历，对数组中的每一个成员执行</span></span><br><span class="line"><span class="comment">  回调函数中的代码可以对数组中的成员</span></span><br><span class="line"><span class="comment">      进行筛选，也可以对每一个成员进行一些操作，没有返回值</span></span><br><span class="line"><span class="comment">  参数：</span></span><br><span class="line"><span class="comment">    item：数组遍历的当前成员（非必须参数）</span></span><br><span class="line"><span class="comment">    index：数组当前项的索引（非必须参数）</span></span><br><span class="line"><span class="comment">    sele：数组本身（非必须参数）*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item, index, arrself</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item, index, arrself)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="2、filter方法"><a href="#2、filter方法" class="headerlink" title="2、filter方法"></a>2、filter方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filter(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span>&#123; </span><br><span class="line"><span class="comment">//数组处理代码  </span></span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">/*对数组进行过滤，对数组中的每一个成员执行</span></span><br><span class="line"><span class="comment">      回调函数中的代码可以对数组中的成员</span></span><br><span class="line"><span class="comment">      进行筛选，返回一个满足条件的新数组*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">15</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.filter(<span class="function">(<span class="params">item, index, arrself</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt;= <span class="number">15</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回数组[20, 35, 15]</span></span><br></pre></td></tr></table></figure><h2 id="3、map方法"><a href="#3、map方法" class="headerlink" title="3、map方法"></a>3、map方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//数组处理代码  </span></span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">/*对数组进行映射，对数组中的每一个成员执行</span></span><br><span class="line"><span class="comment">      回调函数中的代码，返回一个满足条件</span></span><br><span class="line"><span class="comment">      的新数组，常用于把数组中每一项成员执行相同操作*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.map(<span class="function">(<span class="params">item, index, arrself</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item * <span class="number">2</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回数组[2, 4, 6]</span></span><br></pre></td></tr></table></figure><h2 id="4、some方法和every方法"><a href="#4、some方法和every方法" class="headerlink" title="4、some方法和every方法"></a>4、some方法和every方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">some(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span>&#123; </span><br><span class="line"><span class="comment">//数组处理代码  </span></span><br><span class="line">&#125;)</span><br><span class="line">every(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//数组处理代码  </span></span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">/*两种方法都是对数组进行遍历，对数组中的每一个成员执行</span></span><br><span class="line"><span class="comment">      回调函数中的代码，返回</span></span><br><span class="line"><span class="comment">      一个布尔值，常用于判断数组中成员是否满足条件</span></span><br><span class="line"><span class="comment">不同点：</span></span><br><span class="line"><span class="comment">    some方法在遍历数组时，只要有一个成员满足条件即停止遍历返回true</span></span><br><span class="line"><span class="comment">    every方法在遍历数组时，需要所有成员满足条件才会返回true</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">    可以利用some只要有满足条件即会停止查找的机制优化代码执行效率*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">var</span> res1 = arr.some(<span class="function">(<span class="params">item, index, arrself</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">2</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res1)    <span class="comment">//返回布尔值true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res2 = arr.every(<span class="function">(<span class="params">item, index, arrself</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">2</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res2)    <span class="comment">//返回布尔值false</span></span><br></pre></td></tr></table></figure><h2 id="5、find方法和findIndex方法"><a href="#5、find方法和findIndex方法" class="headerlink" title="5、find方法和findIndex方法"></a>5、find方法和findIndex方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">find(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//数组处理代码  </span></span><br><span class="line">&#125;)</span><br><span class="line">findIndex(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//数组处理代码  </span></span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">/*对数组进行遍历查找，对数组中的每一个成员执行回</span></span><br><span class="line"><span class="comment">    调函数中的代码，常用于查找数</span></span><br><span class="line"><span class="comment">    组中成员的筛选，只要有满足条件的就会停止查找</span></span><br><span class="line"><span class="comment">不同点：</span></span><br><span class="line"><span class="comment">    find方法会返回满足条件的成员，没有满足的返回undefined</span></span><br><span class="line"><span class="comment">    findIndex方法会返回满足条件成员的索引，没有满足的返回undefined */</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> res1 = arr.find((item, index, arrself) = &gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">5</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res1)    <span class="comment">//返回9</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res2 = arr.findIndex((item, index, arrself) = &gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">5</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res2)    <span class="comment">//返回1</span></span><br></pre></td></tr></table></figure><h2 id="6、indexOf方法和lastIndexOf方法"><a href="#6、indexOf方法和lastIndexOf方法" class="headerlink" title="6、indexOf方法和lastIndexOf方法"></a>6、indexOf方法和lastIndexOf方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">indexOf(value, position)</span><br><span class="line">lastIndexOf(value, position)</span><br><span class="line">    <span class="comment">/*对数组进行遍历查找，常用于查找数组中指定选项的索引，返回索引值，如果数组中</span></span><br><span class="line"><span class="comment">    没有要查找的选项返回-1</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    value:要查找的选项</span></span><br><span class="line"><span class="comment">    position:查找的起始索引位置（非必须选项）</span></span><br><span class="line"><span class="comment">不同点：</span></span><br><span class="line"><span class="comment">    indexOf方法从前往后依次查找</span></span><br><span class="line"><span class="comment">    lastIndexOf方法从后往前一次查找</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">    可以利用返回-1的特性判断数组是否包含要查找的选项*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> res1 = arr.indexOf(<span class="number">9</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res1)    <span class="comment">//返回1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res2 = arr.lastIndexOf(<span class="number">9</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res2)    <span class="comment">//返回1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res3 = arr.indexOf(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res3)    <span class="comment">//返回-1</span></span><br></pre></td></tr></table></figure><h2 id="6、includes方法"><a href="#6、includes方法" class="headerlink" title="6、includes方法"></a>6、includes方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">includes(value)</span><br><span class="line">    <span class="comment">/*对数组进行遍历查找，查找数组中是否包含要查找的选项，返回一个布尔值</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    value:要查找的选项*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.includes(<span class="number">9</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回true</span></span><br></pre></td></tr></table></figure><h1 id="数组处理的一些方法"><a href="#数组处理的一些方法" class="headerlink" title="数组处理的一些方法"></a>数组处理的一些方法</h1><h2 id="1、join方法"><a href="#1、join方法" class="headerlink" title="1、join方法"></a>1、join方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">join(分隔符)</span><br><span class="line">    <span class="comment">/*对数组中每一项用分隔符进行拼接，返回一个字符串</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    分隔符:数组以什么字符进行拼接*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.join(<span class="string">"$"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回字符串"1$9$3$6$5"</span></span><br></pre></td></tr></table></figure><h2 id="2、concat方法"><a href="#2、concat方法" class="headerlink" title="2、concat方法"></a>2、concat方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">concat(options)</span><br><span class="line">    <span class="comment">/*对数组进行参数的拼接，常用于把其他数组和操作数组拼接在一起，返回一个新数组</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    options:数组要拼接的参数（可以是字符串，也可以是数组）*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"你好"</span></span><br><span class="line">    <span class="keyword">var</span> arrNew = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.concat(str, arrNew)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回数组[1, 5, "你好", 3, 6]</span></span><br></pre></td></tr></table></figure><h2 id="3、push方法和pop方法"><a href="#3、push方法和pop方法" class="headerlink" title="3、push方法和pop方法"></a>3、push方法和pop方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">push(options)</span><br><span class="line">    <span class="comment">//对数组进行添加成员，常用于把其他参数添加到数组`后`面，返回修改后数组长度</span></span><br><span class="line">pop()</span><br><span class="line">    <span class="comment">/*对数组成员进行删除，常用于把数组`最后一项`移出，返回被移除的成员</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    options:添加数组的成员*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> res1 = arr.push(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res1)    <span class="comment">//返回数组长度4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res2 = arr.pop()</span><br><span class="line">    <span class="built_in">console</span>.log(res2)    <span class="comment">//返回被删除成员7</span></span><br></pre></td></tr></table></figure><h2 id="4、unshift方法和shift方法"><a href="#4、unshift方法和shift方法" class="headerlink" title="4、unshift方法和shift方法"></a>4、unshift方法和shift方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unshift(options)</span><br><span class="line">    <span class="comment">//对数组进行添加成员，常用于把其他参数添加到数组`前`面，返回修改后数组长度</span></span><br><span class="line">shift()</span><br><span class="line">    <span class="comment">/*对数组成员进行删除，常用于把数组`第一项`移出，返回被移除的成员，空数组返回undefined</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    options:添加数组的成员*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> res1 = arr.unshift(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res1)    <span class="comment">//返回数组长度4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res2 = arr.shift()</span><br><span class="line">    <span class="built_in">console</span>.log(res2)    <span class="comment">//返回被删除成员3</span></span><br></pre></td></tr></table></figure><h2 id="5、slice方法"><a href="#5、slice方法" class="headerlink" title="5、slice方法"></a>5、slice方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">slice(start, end)</span><br><span class="line">    <span class="comment">/*对数组进行截取，常用于截取数组中的一段数据，返回一个新数组</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    start:截取的开始位置</span></span><br><span class="line"><span class="comment">    end:截取的结束位置（非必须参数）</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">    只设置一个参数测从开始位置截取到数组结束，默认第二个参数变成数组长度</span></span><br><span class="line"><span class="comment">    设置两个参数时位置包左不包右，会截取到结束位置前一个成员*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.slice(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回数组[3, 7, 10]</span></span><br></pre></td></tr></table></figure><h2 id="6、splice方法-一个非常非常好用的数组处理方法"><a href="#6、splice方法-一个非常非常好用的数组处理方法" class="headerlink" title="6、splice方法(一个非常非常好用的数组处理方法)"></a>6、splice方法(一个非常非常好用的数组处理方法)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">splice(start, count, value)</span><br><span class="line">    <span class="comment">/*对数组进行截取，常用于截取数组中的数据，插入数据，返回被删除选项组成的新数</span></span><br><span class="line"><span class="comment">    组，如果没有删除选项则返回空数组，非常强大的方法，操作原数组</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    start:截取的开始位置（必须参数）</span></span><br><span class="line"><span class="comment">    count:截取的成员数（必须参数）</span></span><br><span class="line"><span class="comment">    value:要插入数组的成员（非必须参数）*/</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="string">"插入数据"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回数组[3]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr)    <span class="comment">//[1, 5, "插入数据", 7, 10, 21, 6]</span></span><br></pre></td></tr></table></figure><h1 id="数组中的其他方法"><a href="#数组中的其他方法" class="headerlink" title="数组中的其他方法"></a>数组中的其他方法</h1><h2 id="1、reverse方法"><a href="#1、reverse方法" class="headerlink" title="1、reverse方法"></a>1、reverse方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reverse()</span><br><span class="line">    <span class="comment">//对数组进行翻转，用来改变数组中成员的顺序</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    arr.reverse()</span><br><span class="line">    <span class="built_in">console</span>.log(arr)    <span class="comment">//[5, 6, 3, 9, 1]</span></span><br></pre></td></tr></table></figure><h2 id="2、flat方法"><a href="#2、flat方法" class="headerlink" title="2、flat方法"></a>2、flat方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flat(value)</span><br><span class="line">    <span class="comment">/*对多维数组进行铺平展开，常用于数组中成员依然为数组的数组进行展开变成一维数</span></span><br><span class="line"><span class="comment">    组，返回一个新数组</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    value:要展开数组得维数</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">    在一般情况下我们不知道要展开数组的维数，可设置为infinite */</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">9</span>, [<span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>], <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">var</span> res = arr.flat(infinite)</span><br><span class="line">    <span class="built_in">console</span>.log(res)    <span class="comment">//返回一维数组[1, 9, 7, 8, 10, 6, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端前端导出csv文件（通过json2csv前端导出）</title>
      <link href="/2017/08/15/%E9%80%9A%E8%BF%87json2csv%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BA/"/>
      <url>/2017/08/15/%E9%80%9A%E8%BF%87json2csv%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：安装依赖"><a href="#第一步：安装依赖" class="headerlink" title="第一步：安装依赖"></a>第一步：安装依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install json2csv  -s</span><br></pre></td></tr></table></figure><h2 id="第二步：代码实现"><a href="#第二步：代码实现" class="headerlink" title="第二步：代码实现"></a>第二步：代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">rows: [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'序号'</span>,</span><br><span class="line">    key: <span class="string">'Ordinal'</span>,</span><br><span class="line">    align: <span class="string">'center'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'产品编号'</span>,</span><br><span class="line">    key: <span class="string">'ProductNo'</span>,</span><br><span class="line">    align: <span class="string">'left'</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">fields: [<span class="string">'title'</span>,<span class="string">'key'</span>,<span class="string">'align'</span>]</span><br><span class="line">download()&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = json2csv.parse(rows, &#123;</span><br><span class="line">      fields: fields,</span><br><span class="line">      excelStrings: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.MyBrowserIsIE()) &#123;</span><br><span class="line">      <span class="comment">// IE10以及Edge浏览器</span></span><br><span class="line">      <span class="keyword">var</span> BOM = <span class="string">"\uFEFF"</span>;</span><br><span class="line">              <span class="comment">// 文件转Blob格式</span></span><br><span class="line">      <span class="keyword">var</span> csvData = <span class="keyword">new</span> Blob([BOM + result], &#123; <span class="attr">type</span>: <span class="string">"text/csv"</span> &#125;);</span><br><span class="line">      navigator.msSaveBlob(csvData, <span class="string">`a.csv`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> csvContent = <span class="string">"data:text/csv;charset=utf-8,\uFEFF"</span> + result;</span><br><span class="line">      <span class="comment">// 非ie 浏览器</span></span><br><span class="line">      <span class="keyword">this</span>.createDownLoadClick(csvContent, <span class="string">`a.csv`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    alert(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//创建a标签下载</span></span><br><span class="line">createDownLoadClick(content, fileName) &#123;</span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">  link.href = <span class="built_in">encodeURI</span>(content);</span><br><span class="line">  link.download = fileName;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">  link.click();</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(link);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 判断是否IE浏览器</span></span><br><span class="line">MyBrowserIsIE() &#123;</span><br><span class="line">  <span class="keyword">let</span> isIE = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    navigator.userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp;</span><br><span class="line">    navigator.userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ie浏览器</span></span><br><span class="line">    isIE = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">"Trident"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// edge 浏览器</span></span><br><span class="line">    isIE = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isIE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导出文件格式："><a href="#导出文件格式：" class="headerlink" title="导出文件格式："></a>导出文件格式：</h2><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-06_20-44-51.png" class=""><h2 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportCsv</span>(<span class="params">self, exportDataList</span>) </span>&#123;</span><br><span class="line">    getExportColumns(self.activeKey, self);</span><br><span class="line">    <span class="keyword">const</span> fields = [];</span><br><span class="line">    self.exportColumns.forEach(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = &#123;</span><br><span class="line">            value: t.dataIndex,</span><br><span class="line">            label: t.title</span><br><span class="line">        &#125;;</span><br><span class="line">        fields.push(temp);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> result = json2csv.parse(exportDataList, &#123;</span><br><span class="line">        fields: fields,</span><br><span class="line">        excelStrings: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> fileName = self.exportFileName;</span><br><span class="line">    <span class="keyword">const</span> BOM = <span class="string">"\uFEFF"</span>;</span><br><span class="line">    <span class="keyword">const</span> csvData = <span class="keyword">new</span> Blob([BOM + result], &#123; <span class="attr">type</span>: <span class="string">"text/csv"</span> &#125;);</span><br><span class="line">    <span class="keyword">if</span> (MyBrowserIsIE()) &#123;</span><br><span class="line">        <span class="comment">// IE10以及Edge浏览器</span></span><br><span class="line">        navigator.msSaveBlob(csvData, <span class="string">`<span class="subst">$&#123;fileName&#125;</span>.csv`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 非ie 浏览器</span></span><br><span class="line">        createDownLoadClick(csvData, <span class="string">`<span class="subst">$&#123;fileName&#125;</span>.csv`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">MyBrowserIsIE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isIE = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        navigator.userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp;</span><br><span class="line">        navigator.userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// ie浏览器</span></span><br><span class="line">        isIE = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">"Trident"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// edge 浏览器</span></span><br><span class="line">        isIE = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isIE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建a标签下载</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createDownLoadClick</span>(<span class="params">content, fileName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">    link.href = URL.createObjectURL(content);</span><br><span class="line">    link.download = fileName;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">    link.click();</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 文件下载 </tag>
            
            <tag> csv表格下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件通信</title>
      <link href="/2016/04/13/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2016/04/13/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-04-01.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-02-42.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-04-31.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-04-46.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-05-00.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-05-18.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-05-31.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-05-50.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-06-10.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-06-25.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-06-43.png" class=""><img src="https://yhx0507.github.io/wxapp_static/app/Snipaste_2020-08-13_21-07-09.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端通过Blob实现文件下载</title>
      <link href="/2010/08/06/%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87Blob%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2010/08/06/%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87Blob%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一个需求，需要将页面中的配置信息下载下来供用户方便使用，以前这个场景的需求有时候会放到后端处理，然后给返回一个下载链接。其实并不需要这么麻烦，这样既增大了服务器的负载，也让用户产生了没有必要的网络请求，现在前端也是可以直接通过Blob对象进行前端文件下载了，下面简单记录下相关实现</p><h2 id="Blob对象简要介绍"><a href="#Blob对象简要介绍" class="headerlink" title="Blob对象简要介绍"></a>Blob对象简要介绍</h2><p> <code>Blob</code> 对象表示一个不可变、原始数据的类文件对象。<code>Blob</code> 表示的不一定是<code>JavaScript</code>原生格式的数据。<code>File</code> 接口基于<code>Blob</code>，继承了 <code>Blob</code> 的功能并将其扩展使其支持用户系统上的文件 </p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aBlob = <span class="keyword">new</span> Blob( array, options );</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a><strong>参数说明</strong></h3><ul><li>array 是一个由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成的 Array ，或者其他类似对象的混合体，它将会被放进 Blob。DOMStrings会被编码为UTF-8。</li><li>options 是一个可选的BlobPropertyBag字典，它可能会指定如下两个属性：<ul><li>type，默认值为 “”，它代表了将会被放入到blob中的数组内容的MIME类型。</li><li>endings，默认值为”transparent”，用于指定包含行结束符\n的字符串如何被写入。 它是以下两个值中的一个： “native”，代表行结束符会被更改为适合宿主操作系统文件系统的换行符，或者 “transparent”，代表会保持blob中保存的结束符不变</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = &#123;<span class="attr">hello</span>: <span class="string">"world"</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">JSON</span>.stringify(debug, <span class="literal">null</span>, <span class="number">2</span>)],&#123;<span class="attr">type</span> : <span class="string">'application/json'</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="URL-createObjectURL-与-URL-revokeObjectURL-介绍"><a href="#URL-createObjectURL-与-URL-revokeObjectURL-介绍" class="headerlink" title="URL.createObjectURL() 与 URL.revokeObjectURL()介绍"></a>URL.createObjectURL() 与 URL.revokeObjectURL()介绍</h2><p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。相当于这个方法创建了一个传入对象的内存引用地址</p><h3 id="createObjectURL语法"><a href="#createObjectURL语法" class="headerlink" title="createObjectURL语法"></a>createObjectURL语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectURL = URL.createObjectURL(object);</span><br></pre></td></tr></table></figure><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>object 是用于创建 URL 的 File 对象、Blob 对象或者 MediaSource 对象。</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>一个可以引用到指定对象的<code>DOMString</code> </li></ul><p><code>URL.revokeObjectURL()</code> 静态方法用来释放一个之前已经存在的、通过调用 <code>URL.createObjectURL()</code> 创建的 <code>URL</code> 对象。当你结束使用某个 <code>URL</code> 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</p><p>你可以在 <code>sourceopen</code> 被处理之后的任何时候调用 <code>revokeObjectURL()</code>。这是因为 <code>createObjectURL()</code> 仅仅意味着将一个媒体元素的 <code>src</code> 属性关联到一个 <code>MediaSource</code> 对象上去。调用<code>revokeObjectURL()</code> 使这个潜在的对象回到原来的地方，允许平台在合适的时机进行<strong>垃圾收集</strong>。</p><h3 id="revokeObjectURL语法"><a href="#revokeObjectURL语法" class="headerlink" title="revokeObjectURL语法"></a>revokeObjectURL语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.URL.revokeObjectURL(objectURL);</span><br></pre></td></tr></table></figure><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a><strong>参数说明</strong></h4><ul><li>objectURL 是一个 DOMString，表示通过调用 <code>URL.createObjectURL()</code> 方法产生的 URL 对象 </li></ul><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><strong>内存管理</strong></h4><ul><li>在每次调用<code>createObjectURL()</code> 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 <code>URL.revokeObjectURL()</code> 方法来释放。浏览器会在文档退出的时候自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。 </li></ul><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><p> 比如在某后台管理中希望将用户的几个配置信息导入到一个<code>json</code>文件当中供用户下载下来 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  name: <span class="string">'lsqy'</span>,</span><br><span class="line">  password: <span class="string">'yourpassword'</span>,</span><br><span class="line">  ak: <span class="string">'XXXXXXXXXX'</span>,</span><br><span class="line">  sk: <span class="string">'XXXXXXXXXX'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> blobContent = <span class="keyword">new</span> Blob(</span><br><span class="line">  [<span class="built_in">JSON</span>.stringify(config, <span class="literal">null</span>, <span class="number">2</span>)],</span><br><span class="line">  &#123;<span class="attr">type</span> : <span class="string">'application/json'</span>&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> blobUrl = <span class="built_in">window</span>.URL.createObjectURL(blobContent)</span><br><span class="line"></span><br><span class="line">downloadFileByBlob(blobUrl, <span class="string">'config.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFileByBlob</span>(<span class="params">blobUrl, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> eleLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  eleLink.download = filename</span><br><span class="line">  eleLink.style.display = <span class="string">'none'</span></span><br><span class="line">  eleLink.href = blobUrl</span><br><span class="line">  <span class="comment">// 触发点击</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(eleLink)</span><br><span class="line">  eleLink.click()</span><br><span class="line">  <span class="comment">// 然后移除</span></span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(eleLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面的代码，我们可以得到一个<code>config.json</code>的文件，可以看到，其实很简单就实现了这个场景需求，当然这里是下载的<code>json</code>文件,下载其他的文件也是一样的道理，只是需要得到相应文件的<code>blob</code>数据，再结合相应的<a href="https://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener">MIME</a>类型即可;</p><p>兼容性方面目前主流浏览器都已支持，ie10以及以上也支持。</p><p>另外<code>Blob</code>结合<code>URL. createObjectURL()</code>与<code>URL.revokeObjectURL()</code>还可以用在预览图片、预览PDF、视频链接防盗等多种场景中，大家可以发挥自己的想象力来进行实现</p><h2 id="Mime类型"><a href="#Mime类型" class="headerlink" title="Mime类型"></a>Mime类型</h2><h3 id="按照内容类型排列的-Mime-类型列表"><a href="#按照内容类型排列的-Mime-类型列表" class="headerlink" title="按照内容类型排列的 Mime 类型列表"></a>按照内容类型排列的 Mime 类型列表</h3><table><thead><tr><th align="left">类型/子类型</th><th align="left">扩展名</th></tr></thead><tbody><tr><td align="left">application/envoy</td><td align="left">evy</td></tr><tr><td align="left">application/fractals</td><td align="left">fif</td></tr><tr><td align="left">application/futuresplash</td><td align="left">spl</td></tr><tr><td align="left">application/hta</td><td align="left">hta</td></tr><tr><td align="left">application/internet-property-stream</td><td align="left">acx</td></tr><tr><td align="left">application/mac-binhex40</td><td align="left">hqx</td></tr><tr><td align="left">application/msword</td><td align="left">doc</td></tr><tr><td align="left">application/msword</td><td align="left">dot</td></tr><tr><td align="left">application/octet-stream</td><td align="left">*</td></tr><tr><td align="left">application/octet-stream</td><td align="left">bin</td></tr><tr><td align="left">application/octet-stream</td><td align="left">class</td></tr><tr><td align="left">application/octet-stream</td><td align="left">dms</td></tr><tr><td align="left">application/octet-stream</td><td align="left">exe</td></tr><tr><td align="left">application/octet-stream</td><td align="left">lha</td></tr><tr><td align="left">application/octet-stream</td><td align="left">lzh</td></tr><tr><td align="left">application/oda</td><td align="left">oda</td></tr><tr><td align="left">application/olescript</td><td align="left">axs</td></tr><tr><td align="left">application/pdf</td><td align="left">pdf</td></tr><tr><td align="left">application/pics-rules</td><td align="left">prf</td></tr><tr><td align="left">application/pkcs10</td><td align="left">p10</td></tr><tr><td align="left">application/pkix-crl</td><td align="left">crl</td></tr><tr><td align="left">application/postscript</td><td align="left">ai</td></tr><tr><td align="left">application/postscript</td><td align="left">eps</td></tr><tr><td align="left">application/postscript</td><td align="left">ps</td></tr><tr><td align="left">application/rtf</td><td align="left">rtf</td></tr><tr><td align="left">application/set-payment-initiation</td><td align="left">setpay</td></tr><tr><td align="left">application/set-registration-initiation</td><td align="left">setreg</td></tr><tr><td align="left">application/vnd.ms-excel</td><td align="left">xla</td></tr><tr><td align="left">application/vnd.ms-excel</td><td align="left">xlc</td></tr><tr><td align="left">application/vnd.ms-excel</td><td align="left">xlm</td></tr><tr><td align="left">application/vnd.ms-excel</td><td align="left">xls</td></tr><tr><td align="left">application/vnd.ms-excel</td><td align="left">xlt</td></tr><tr><td align="left">application/vnd.ms-excel</td><td align="left">xlw</td></tr><tr><td align="left">application/vnd.ms-outlook</td><td align="left">msg</td></tr><tr><td align="left">application/vnd.ms-pkicertstore</td><td align="left">sst</td></tr><tr><td align="left">application/vnd.ms-pkiseccat</td><td align="left">cat</td></tr><tr><td align="left">application/vnd.ms-pkistl</td><td align="left">stl</td></tr><tr><td align="left">application/vnd.ms-powerpoint</td><td align="left">pot</td></tr><tr><td align="left">application/vnd.ms-powerpoint</td><td align="left">pps</td></tr><tr><td align="left">application/vnd.ms-powerpoint</td><td align="left">ppt</td></tr><tr><td align="left">application/vnd.ms-project</td><td align="left">mpp</td></tr><tr><td align="left">application/vnd.ms-works</td><td align="left">wcm</td></tr><tr><td align="left">application/vnd.ms-works</td><td align="left">wdb</td></tr><tr><td align="left">application/vnd.ms-works</td><td align="left">wks</td></tr><tr><td align="left">application/vnd.ms-works</td><td align="left">wps</td></tr><tr><td align="left">application/winhlp</td><td align="left">hlp</td></tr><tr><td align="left">application/x-bcpio</td><td align="left">bcpio</td></tr><tr><td align="left">application/x-cdf</td><td align="left">cdf</td></tr><tr><td align="left">application/x-compress</td><td align="left">z</td></tr><tr><td align="left">application/x-compressed</td><td align="left">tgz</td></tr><tr><td align="left">application/x-cpio</td><td align="left">cpio</td></tr><tr><td align="left">application/x-csh</td><td align="left">csh</td></tr><tr><td align="left">application/x-director</td><td align="left">dcr</td></tr><tr><td align="left">application/x-director</td><td align="left">dir</td></tr><tr><td align="left">application/x-director</td><td align="left">dxr</td></tr><tr><td align="left">application/x-dvi</td><td align="left">dvi</td></tr><tr><td align="left">application/x-gtar</td><td align="left">gtar</td></tr><tr><td align="left">application/x-gzip</td><td align="left">gz</td></tr><tr><td align="left">application/x-hdf</td><td align="left">hdf</td></tr><tr><td align="left">application/x-internet-signup</td><td align="left">ins</td></tr><tr><td align="left">application/x-internet-signup</td><td align="left">isp</td></tr><tr><td align="left">application/x-iphone</td><td align="left">iii</td></tr><tr><td align="left">application/x-javascript</td><td align="left">js</td></tr><tr><td align="left">application/x-latex</td><td align="left">latex</td></tr><tr><td align="left">application/x-msaccess</td><td align="left">mdb</td></tr><tr><td align="left">application/x-mscardfile</td><td align="left">crd</td></tr><tr><td align="left">application/x-msclip</td><td align="left">clp</td></tr><tr><td align="left">application/x-msdownload</td><td align="left">dll</td></tr><tr><td align="left">application/x-msmediaview</td><td align="left">m13</td></tr><tr><td align="left">application/x-msmediaview</td><td align="left">m14</td></tr><tr><td align="left">application/x-msmediaview</td><td align="left">mvb</td></tr><tr><td align="left">application/x-msmetafile</td><td align="left">wmf</td></tr><tr><td align="left">application/x-msmoney</td><td align="left">mny</td></tr><tr><td align="left">application/x-mspublisher</td><td align="left">pub</td></tr><tr><td align="left">application/x-msschedule</td><td align="left">scd</td></tr><tr><td align="left">application/x-msterminal</td><td align="left">trm</td></tr><tr><td align="left">application/x-mswrite</td><td align="left">wri</td></tr><tr><td align="left">application/x-netcdf</td><td align="left">cdf</td></tr><tr><td align="left">application/x-netcdf</td><td align="left">nc</td></tr><tr><td align="left">application/x-perfmon</td><td align="left">pma</td></tr><tr><td align="left">application/x-perfmon</td><td align="left">pmc</td></tr><tr><td align="left">application/x-perfmon</td><td align="left">pml</td></tr><tr><td align="left">application/x-perfmon</td><td align="left">pmr</td></tr><tr><td align="left">application/x-perfmon</td><td align="left">pmw</td></tr><tr><td align="left">application/x-pkcs12</td><td align="left">p12</td></tr><tr><td align="left">application/x-pkcs12</td><td align="left">pfx</td></tr><tr><td align="left">application/x-pkcs7-certificates</td><td align="left">p7b</td></tr><tr><td align="left">application/x-pkcs7-certificates</td><td align="left">spc</td></tr><tr><td align="left">application/x-pkcs7-certreqresp</td><td align="left">p7r</td></tr><tr><td align="left">application/x-pkcs7-mime</td><td align="left">p7c</td></tr><tr><td align="left">application/x-pkcs7-mime</td><td align="left">p7m</td></tr><tr><td align="left">application/x-pkcs7-signature</td><td align="left">p7s</td></tr><tr><td align="left">application/x-sh</td><td align="left">sh</td></tr><tr><td align="left">application/x-shar</td><td align="left">shar</td></tr><tr><td align="left">application/x-shockwave-flash</td><td align="left">swf</td></tr><tr><td align="left">application/x-stuffit</td><td align="left">sit</td></tr><tr><td align="left">application/x-sv4cpio</td><td align="left">sv4cpio</td></tr><tr><td align="left">application/x-sv4crc</td><td align="left">sv4crc</td></tr><tr><td align="left">application/x-tar</td><td align="left">tar</td></tr><tr><td align="left">application/x-tcl</td><td align="left">tcl</td></tr><tr><td align="left">application/x-tex</td><td align="left">tex</td></tr><tr><td align="left">application/x-texinfo</td><td align="left">texi</td></tr><tr><td align="left">application/x-texinfo</td><td align="left">texinfo</td></tr><tr><td align="left">application/x-troff</td><td align="left">roff</td></tr><tr><td align="left">application/x-troff</td><td align="left">t</td></tr><tr><td align="left">application/x-troff</td><td align="left">tr</td></tr><tr><td align="left">application/x-troff-man</td><td align="left">man</td></tr><tr><td align="left">application/x-troff-me</td><td align="left">me</td></tr><tr><td align="left">application/x-troff-ms</td><td align="left">ms</td></tr><tr><td align="left">application/x-ustar</td><td align="left">ustar</td></tr><tr><td align="left">application/x-wais-source</td><td align="left">src</td></tr><tr><td align="left">application/x-x509-ca-cert</td><td align="left">cer</td></tr><tr><td align="left">application/x-x509-ca-cert</td><td align="left">crt</td></tr><tr><td align="left">application/x-x509-ca-cert</td><td align="left">der</td></tr><tr><td align="left">application/ynd.ms-pkipko</td><td align="left">pko</td></tr><tr><td align="left">application/zip</td><td align="left">zip</td></tr><tr><td align="left">audio/basic</td><td align="left">au</td></tr><tr><td align="left">audio/basic</td><td align="left">snd</td></tr><tr><td align="left">audio/mid</td><td align="left">mid</td></tr><tr><td align="left">audio/mid</td><td align="left">rmi</td></tr><tr><td align="left">audio/mpeg</td><td align="left">mp3</td></tr><tr><td align="left">audio/x-aiff</td><td align="left">aif</td></tr><tr><td align="left">audio/x-aiff</td><td align="left">aifc</td></tr><tr><td align="left">audio/x-aiff</td><td align="left">aiff</td></tr><tr><td align="left">audio/x-mpegurl</td><td align="left">m3u</td></tr><tr><td align="left">audio/x-pn-realaudio</td><td align="left">ra</td></tr><tr><td align="left">audio/x-pn-realaudio</td><td align="left">ram</td></tr><tr><td align="left">audio/x-wav</td><td align="left">wav</td></tr><tr><td align="left">image/bmp</td><td align="left">bmp</td></tr><tr><td align="left">image/cis-cod</td><td align="left">cod</td></tr><tr><td align="left">image/gif</td><td align="left">gif</td></tr><tr><td align="left">image/ief</td><td align="left">ief</td></tr><tr><td align="left">image/jpeg</td><td align="left">jpe</td></tr><tr><td align="left">image/jpeg</td><td align="left">jpeg</td></tr><tr><td align="left">image/jpeg</td><td align="left">jpg</td></tr><tr><td align="left">image/pipeg</td><td align="left">jfif</td></tr><tr><td align="left">image/svg+xml</td><td align="left">svg</td></tr><tr><td align="left">image/tiff</td><td align="left">tif</td></tr><tr><td align="left">image/tiff</td><td align="left">tiff</td></tr><tr><td align="left">image/x-cmu-raster</td><td align="left">ras</td></tr><tr><td align="left">image/x-cmx</td><td align="left">cmx</td></tr><tr><td align="left">image/x-icon</td><td align="left">ico</td></tr><tr><td align="left">image/x-portable-anymap</td><td align="left">pnm</td></tr><tr><td align="left">image/x-portable-bitmap</td><td align="left">pbm</td></tr><tr><td align="left">image/x-portable-graymap</td><td align="left">pgm</td></tr><tr><td align="left">image/x-portable-pixmap</td><td align="left">ppm</td></tr><tr><td align="left">image/x-rgb</td><td align="left">rgb</td></tr><tr><td align="left">image/x-xbitmap</td><td align="left">xbm</td></tr><tr><td align="left">image/x-xpixmap</td><td align="left">xpm</td></tr><tr><td align="left">image/x-xwindowdump</td><td align="left">xwd</td></tr><tr><td align="left">message/rfc822</td><td align="left">mht</td></tr><tr><td align="left">message/rfc822</td><td align="left">mhtml</td></tr><tr><td align="left">message/rfc822</td><td align="left">nws</td></tr><tr><td align="left">text/css</td><td align="left">css</td></tr><tr><td align="left">text/h323</td><td align="left">323</td></tr><tr><td align="left">text/html</td><td align="left">htm</td></tr><tr><td align="left">text/html</td><td align="left">html</td></tr><tr><td align="left">text/html</td><td align="left">stm</td></tr><tr><td align="left">text/iuls</td><td align="left">uls</td></tr><tr><td align="left">text/plain</td><td align="left">bas</td></tr><tr><td align="left">text/plain</td><td align="left">c</td></tr><tr><td align="left">text/plain</td><td align="left">h</td></tr><tr><td align="left">text/plain</td><td align="left">txt</td></tr><tr><td align="left">text/richtext</td><td align="left">rtx</td></tr><tr><td align="left">text/scriptlet</td><td align="left">sct</td></tr><tr><td align="left">text/tab-separated-values</td><td align="left">tsv</td></tr><tr><td align="left">text/webviewhtml</td><td align="left">htt</td></tr><tr><td align="left">text/x-component</td><td align="left">htc</td></tr><tr><td align="left">text/x-setext</td><td align="left">etx</td></tr><tr><td align="left">text/x-vcard</td><td align="left">vcf</td></tr><tr><td align="left">video/mpeg</td><td align="left">mp2</td></tr><tr><td align="left">video/mpeg</td><td align="left">mpa</td></tr><tr><td align="left">video/mpeg</td><td align="left">mpe</td></tr><tr><td align="left">video/mpeg</td><td align="left">mpeg</td></tr><tr><td align="left">video/mpeg</td><td align="left">mpg</td></tr><tr><td align="left">video/mpeg</td><td align="left">mpv2</td></tr><tr><td align="left">video/quicktime</td><td align="left">mov</td></tr><tr><td align="left">video/quicktime</td><td align="left">qt</td></tr><tr><td align="left">video/x-la-asf</td><td align="left">lsf</td></tr><tr><td align="left">video/x-la-asf</td><td align="left">lsx</td></tr><tr><td align="left">video/x-ms-asf</td><td align="left">asf</td></tr><tr><td align="left">video/x-ms-asf</td><td align="left">asr</td></tr><tr><td align="left">video/x-ms-asf</td><td align="left">asx</td></tr><tr><td align="left">video/x-msvideo</td><td align="left">avi</td></tr><tr><td align="left">video/x-sgi-movie</td><td align="left">movie</td></tr><tr><td align="left">x-world/x-vrml</td><td align="left">flr</td></tr><tr><td align="left">x-world/x-vrml</td><td align="left">vrml</td></tr><tr><td align="left">x-world/x-vrml</td><td align="left">wrl</td></tr><tr><td align="left">x-world/x-vrml</td><td align="left">wrz</td></tr><tr><td align="left">x-world/x-vrml</td><td align="left">xaf</td></tr><tr><td align="left">x-world/x-vrml</td><td align="left">xof</td></tr></tbody></table><h3 id="按照文件扩展名排列的-Mime-类型列表"><a href="#按照文件扩展名排列的-Mime-类型列表" class="headerlink" title="按照文件扩展名排列的 Mime 类型列表"></a>按照文件扩展名排列的 Mime 类型列表</h3><table><thead><tr><th align="left">扩展名</th><th align="left">类型/子类型</th></tr></thead><tbody><tr><td align="left"></td><td align="left">application/octet-stream</td></tr><tr><td align="left">323</td><td align="left">text/h323</td></tr><tr><td align="left">acx</td><td align="left">application/internet-property-stream</td></tr><tr><td align="left">ai</td><td align="left">application/postscript</td></tr><tr><td align="left">aif</td><td align="left">audio/x-aiff</td></tr><tr><td align="left">aifc</td><td align="left">audio/x-aiff</td></tr><tr><td align="left">aiff</td><td align="left">audio/x-aiff</td></tr><tr><td align="left">asf</td><td align="left">video/x-ms-asf</td></tr><tr><td align="left">asr</td><td align="left">video/x-ms-asf</td></tr><tr><td align="left">asx</td><td align="left">video/x-ms-asf</td></tr><tr><td align="left">au</td><td align="left">audio/basic</td></tr><tr><td align="left">avi</td><td align="left">video/x-msvideo</td></tr><tr><td align="left">axs</td><td align="left">application/olescript</td></tr><tr><td align="left">bas</td><td align="left">text/plain</td></tr><tr><td align="left">bcpio</td><td align="left">application/x-bcpio</td></tr><tr><td align="left">bin</td><td align="left">application/octet-stream</td></tr><tr><td align="left">bmp</td><td align="left">image/bmp</td></tr><tr><td align="left">c</td><td align="left">text/plain</td></tr><tr><td align="left">cat</td><td align="left">application/vnd.ms-pkiseccat</td></tr><tr><td align="left">cdf</td><td align="left">application/x-cdf</td></tr><tr><td align="left">cer</td><td align="left">application/x-x509-ca-cert</td></tr><tr><td align="left">class</td><td align="left">application/octet-stream</td></tr><tr><td align="left">clp</td><td align="left">application/x-msclip</td></tr><tr><td align="left">cmx</td><td align="left">image/x-cmx</td></tr><tr><td align="left">cod</td><td align="left">image/cis-cod</td></tr><tr><td align="left">cpio</td><td align="left">application/x-cpio</td></tr><tr><td align="left">crd</td><td align="left">application/x-mscardfile</td></tr><tr><td align="left">crl</td><td align="left">application/pkix-crl</td></tr><tr><td align="left">crt</td><td align="left">application/x-x509-ca-cert</td></tr><tr><td align="left">csh</td><td align="left">application/x-csh</td></tr><tr><td align="left">css</td><td align="left">text/css</td></tr><tr><td align="left">dcr</td><td align="left">application/x-director</td></tr><tr><td align="left">der</td><td align="left">application/x-x509-ca-cert</td></tr><tr><td align="left">dir</td><td align="left">application/x-director</td></tr><tr><td align="left">dll</td><td align="left">application/x-msdownload</td></tr><tr><td align="left">dms</td><td align="left">application/octet-stream</td></tr><tr><td align="left">doc</td><td align="left">application/msword</td></tr><tr><td align="left">dot</td><td align="left">application/msword</td></tr><tr><td align="left">dvi</td><td align="left">application/x-dvi</td></tr><tr><td align="left">dxr</td><td align="left">application/x-director</td></tr><tr><td align="left">eps</td><td align="left">application/postscript</td></tr><tr><td align="left">etx</td><td align="left">text/x-setext</td></tr><tr><td align="left">evy</td><td align="left">application/envoy</td></tr><tr><td align="left">exe</td><td align="left">application/octet-stream</td></tr><tr><td align="left">fif</td><td align="left">application/fractals</td></tr><tr><td align="left">flr</td><td align="left">x-world/x-vrml</td></tr><tr><td align="left">gif</td><td align="left">image/gif</td></tr><tr><td align="left">gtar</td><td align="left">application/x-gtar</td></tr><tr><td align="left">gz</td><td align="left">application/x-gzip</td></tr><tr><td align="left">h</td><td align="left">text/plain</td></tr><tr><td align="left">hdf</td><td align="left">application/x-hdf</td></tr><tr><td align="left">hlp</td><td align="left">application/winhlp</td></tr><tr><td align="left">hqx</td><td align="left">application/mac-binhex40</td></tr><tr><td align="left">hta</td><td align="left">application/hta</td></tr><tr><td align="left">htc</td><td align="left">text/x-component</td></tr><tr><td align="left">htm</td><td align="left">text/html</td></tr><tr><td align="left">html</td><td align="left">text/html</td></tr><tr><td align="left">htt</td><td align="left">text/webviewhtml</td></tr><tr><td align="left">ico</td><td align="left">image/x-icon</td></tr><tr><td align="left">ief</td><td align="left">image/ief</td></tr><tr><td align="left">iii</td><td align="left">application/x-iphone</td></tr><tr><td align="left">ins</td><td align="left">application/x-internet-signup</td></tr><tr><td align="left">isp</td><td align="left">application/x-internet-signup</td></tr><tr><td align="left">jfif</td><td align="left">image/pipeg</td></tr><tr><td align="left">jpe</td><td align="left">image/jpeg</td></tr><tr><td align="left">jpeg</td><td align="left">image/jpeg</td></tr><tr><td align="left">jpg</td><td align="left">image/jpeg</td></tr><tr><td align="left">js</td><td align="left">application/x-javascript</td></tr><tr><td align="left">latex</td><td align="left">application/x-latex</td></tr><tr><td align="left">lha</td><td align="left">application/octet-stream</td></tr><tr><td align="left">lsf</td><td align="left">video/x-la-asf</td></tr><tr><td align="left">lsx</td><td align="left">video/x-la-asf</td></tr><tr><td align="left">lzh</td><td align="left">application/octet-stream</td></tr><tr><td align="left">m13</td><td align="left">application/x-msmediaview</td></tr><tr><td align="left">m14</td><td align="left">application/x-msmediaview</td></tr><tr><td align="left">m3u</td><td align="left">audio/x-mpegurl</td></tr><tr><td align="left">man</td><td align="left">application/x-troff-man</td></tr><tr><td align="left">mdb</td><td align="left">application/x-msaccess</td></tr><tr><td align="left">me</td><td align="left">application/x-troff-me</td></tr><tr><td align="left">mht</td><td align="left">message/rfc822</td></tr><tr><td align="left">mhtml</td><td align="left">message/rfc822</td></tr><tr><td align="left">mid</td><td align="left">audio/mid</td></tr><tr><td align="left">mny</td><td align="left">application/x-msmoney</td></tr><tr><td align="left">mov</td><td align="left">video/quicktime</td></tr><tr><td align="left">movie</td><td align="left">video/x-sgi-movie</td></tr><tr><td align="left">mp2</td><td align="left">video/mpeg</td></tr><tr><td align="left">mp3</td><td align="left">audio/mpeg</td></tr><tr><td align="left">mpa</td><td align="left">video/mpeg</td></tr><tr><td align="left">mpe</td><td align="left">video/mpeg</td></tr><tr><td align="left">mpeg</td><td align="left">video/mpeg</td></tr><tr><td align="left">mpg</td><td align="left">video/mpeg</td></tr><tr><td align="left">mpp</td><td align="left">application/vnd.ms-project</td></tr><tr><td align="left">mpv2</td><td align="left">video/mpeg</td></tr><tr><td align="left">ms</td><td align="left">application/x-troff-ms</td></tr><tr><td align="left">mvb</td><td align="left">application/x-msmediaview</td></tr><tr><td align="left">nws</td><td align="left">message/rfc822</td></tr><tr><td align="left">oda</td><td align="left">application/oda</td></tr><tr><td align="left">p10</td><td align="left">application/pkcs10</td></tr><tr><td align="left">p12</td><td align="left">application/x-pkcs12</td></tr><tr><td align="left">p7b</td><td align="left">application/x-pkcs7-certificates</td></tr><tr><td align="left">p7c</td><td align="left">application/x-pkcs7-mime</td></tr><tr><td align="left">p7m</td><td align="left">application/x-pkcs7-mime</td></tr><tr><td align="left">p7r</td><td align="left">application/x-pkcs7-certreqresp</td></tr><tr><td align="left">p7s</td><td align="left">application/x-pkcs7-signature</td></tr><tr><td align="left">pbm</td><td align="left">image/x-portable-bitmap</td></tr><tr><td align="left">pdf</td><td align="left">application/pdf</td></tr><tr><td align="left">pfx</td><td align="left">application/x-pkcs12</td></tr><tr><td align="left">pgm</td><td align="left">image/x-portable-graymap</td></tr><tr><td align="left">pko</td><td align="left">application/ynd.ms-pkipko</td></tr><tr><td align="left">pma</td><td align="left">application/x-perfmon</td></tr><tr><td align="left">pmc</td><td align="left">application/x-perfmon</td></tr><tr><td align="left">pml</td><td align="left">application/x-perfmon</td></tr><tr><td align="left">pmr</td><td align="left">application/x-perfmon</td></tr><tr><td align="left">pmw</td><td align="left">application/x-perfmon</td></tr><tr><td align="left">pnm</td><td align="left">image/x-portable-anymap</td></tr><tr><td align="left">pot,</td><td align="left">application/vnd.ms-powerpoint</td></tr><tr><td align="left">ppm</td><td align="left">image/x-portable-pixmap</td></tr><tr><td align="left">pps</td><td align="left">application/vnd.ms-powerpoint</td></tr><tr><td align="left">ppt</td><td align="left">application/vnd.ms-powerpoint</td></tr><tr><td align="left">prf</td><td align="left">application/pics-rules</td></tr><tr><td align="left">ps</td><td align="left">application/postscript</td></tr><tr><td align="left">pub</td><td align="left">application/x-mspublisher</td></tr><tr><td align="left">qt</td><td align="left">video/quicktime</td></tr><tr><td align="left">ra</td><td align="left">audio/x-pn-realaudio</td></tr><tr><td align="left">ram</td><td align="left">audio/x-pn-realaudio</td></tr><tr><td align="left">ras</td><td align="left">image/x-cmu-raster</td></tr><tr><td align="left">rgb</td><td align="left">image/x-rgb</td></tr><tr><td align="left">rmi</td><td align="left">audio/mid</td></tr><tr><td align="left">roff</td><td align="left">application/x-troff</td></tr><tr><td align="left">rtf</td><td align="left">application/rtf</td></tr><tr><td align="left">rtx</td><td align="left">text/richtext</td></tr><tr><td align="left">scd</td><td align="left">application/x-msschedule</td></tr><tr><td align="left">sct</td><td align="left">text/scriptlet</td></tr><tr><td align="left">setpay</td><td align="left">application/set-payment-initiation</td></tr><tr><td align="left">setreg</td><td align="left">application/set-registration-initiation</td></tr><tr><td align="left">sh</td><td align="left">application/x-sh</td></tr><tr><td align="left">shar</td><td align="left">application/x-shar</td></tr><tr><td align="left">sit</td><td align="left">application/x-stuffit</td></tr><tr><td align="left">snd</td><td align="left">audio/basic</td></tr><tr><td align="left">spc</td><td align="left">application/x-pkcs7-certificates</td></tr><tr><td align="left">spl</td><td align="left">application/futuresplash</td></tr><tr><td align="left">src</td><td align="left">application/x-wais-source</td></tr><tr><td align="left">sst</td><td align="left">application/vnd.ms-pkicertstore</td></tr><tr><td align="left">stl</td><td align="left">application/vnd.ms-pkistl</td></tr><tr><td align="left">stm</td><td align="left">text/html</td></tr><tr><td align="left">svg</td><td align="left">image/svg+xml</td></tr><tr><td align="left">sv4cpio</td><td align="left">application/x-sv4cpio</td></tr><tr><td align="left">sv4crc</td><td align="left">application/x-sv4crc</td></tr><tr><td align="left">swf</td><td align="left">application/x-shockwave-flash</td></tr><tr><td align="left">t</td><td align="left">application/x-troff</td></tr><tr><td align="left">tar</td><td align="left">application/x-tar</td></tr><tr><td align="left">tcl</td><td align="left">application/x-tcl</td></tr><tr><td align="left">tex</td><td align="left">application/x-tex</td></tr><tr><td align="left">texi</td><td align="left">application/x-texinfo</td></tr><tr><td align="left">texinfo</td><td align="left">application/x-texinfo</td></tr><tr><td align="left">tgz</td><td align="left">application/x-compressed</td></tr><tr><td align="left">tif</td><td align="left">image/tiff</td></tr><tr><td align="left">tiff</td><td align="left">image/tiff</td></tr><tr><td align="left">tr</td><td align="left">application/x-troff</td></tr><tr><td align="left">trm</td><td align="left">application/x-msterminal</td></tr><tr><td align="left">tsv</td><td align="left">text/tab-separated-values</td></tr><tr><td align="left">txt</td><td align="left">text/plain</td></tr><tr><td align="left">uls</td><td align="left">text/iuls</td></tr><tr><td align="left">ustar</td><td align="left">application/x-ustar</td></tr><tr><td align="left">vcf</td><td align="left">text/x-vcard</td></tr><tr><td align="left">vrml</td><td align="left">x-world/x-vrml</td></tr><tr><td align="left">wav</td><td align="left">audio/x-wav</td></tr><tr><td align="left">wcm</td><td align="left">application/vnd.ms-works</td></tr><tr><td align="left">wdb</td><td align="left">application/vnd.ms-works</td></tr><tr><td align="left">wks</td><td align="left">application/vnd.ms-works</td></tr><tr><td align="left">wmf</td><td align="left">application/x-msmetafile</td></tr><tr><td align="left">wps</td><td align="left">application/vnd.ms-works</td></tr><tr><td align="left">wri</td><td align="left">application/x-mswrite</td></tr><tr><td align="left">wrl</td><td align="left">x-world/x-vrml</td></tr><tr><td align="left">wrz</td><td align="left">x-world/x-vrml</td></tr><tr><td align="left">xaf</td><td align="left">x-world/x-vrml</td></tr><tr><td align="left">xbm</td><td align="left">image/x-xbitmap</td></tr><tr><td align="left">xla</td><td align="left">application/vnd.ms-excel</td></tr><tr><td align="left">xlc</td><td align="left">application/vnd.ms-excel</td></tr><tr><td align="left">xlm</td><td align="left">application/vnd.ms-excel</td></tr><tr><td align="left">xls</td><td align="left">application/vnd.ms-excel</td></tr><tr><td align="left">xlt</td><td align="left">application/vnd.ms-excel</td></tr><tr><td align="left">xlw</td><td align="left">application/vnd.ms-excel</td></tr><tr><td align="left">xof</td><td align="left">x-world/x-vrml</td></tr><tr><td align="left">xpm</td><td align="left">image/x-xpixmap</td></tr><tr><td align="left">xwd</td><td align="left">image/x-xwindowdump</td></tr><tr><td align="left">z</td><td align="left">application/x-compress</td></tr><tr><td align="left">zip</td><td align="left">application/zip</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Blob </tag>
            
            <tag> 文件下载 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
